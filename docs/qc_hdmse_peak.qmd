# Data Analysis - QC mix

```{r}
#| output: false
#| warning: false

#Data is importer for the two data set (mzmine and ms_dial). A reference data frame is constructed (unifi) as well as data frame with theoretical values (qc_compounds)

#library(readr)
#library(readxl)

mzmine <- read_excel("~/Project/hrms_converter-2024/qc5rep_hdmse_peakpicking_featurelist_MZMINE.xlsx", 
    col_types = c("text", "text", "numeric", 
        "numeric", "text", "text", "numeric", 
        "numeric", "text", "numeric", "numeric", 
        "text", "text", "text", "text", "text", 
        "text", "text", "numeric", "text", 
        "text", "text", "text", "text", "numeric", 
        "text", "text", "text", "text", "text", 
        "text", "text", "text", "text", "text", 
        "text", "text", "text", "text", "text", 
        "text", "text", "text", "numeric", 
        "numeric", "numeric", "text", "text", 
        "text", "text", "text", "text", "text", 
        "text", "text", "text", "text", "text", 
        "text", "text", "text", "text", "text", 
        "text", "numeric", "numeric", "numeric", 
        "text", "text", "text", "text", "text", 
        "text", "text", "text", "text", "text", 
        "text", "text", "text", "text", "text", 
        "text", "text", "text", "numeric", 
        "numeric", "numeric", "text", "text", 
        "text", "text", "text", "text", "text", 
        "text", "text", "text", "text", "text", 
        "text", "text", "text", "text", "text", 
        "text", "numeric", "numeric", "numeric", 
        "text", "text", "text", "text", "text", 
        "text", "text", "text", "text", "text", 
        "text", "text", "text", "text", "text", 
        "text", "text", "text", "numeric", 
        "numeric", "numeric"))

ms_dial <- read_excel("~/Project/hrms_converter-2024/qc3rep_hdmse_peakpicking_featurelist_MSDIAL.xlsx")

unifi <- data.frame(compound=c("acetaminophen","caffeine","leucine enkephaline","reserpine","sulfadimethoxine","sulfaguanidine","terfenadine","val-tyr-val","verapamil")
  , mz_unifi=c(152.0697, 195.0870, 556.2756, 609.2787, 311.0801, 215.0589, 472.3197, 380.2173, 455.2892),
  rt_unifi=c(0.56,1.30,2.37,3.37,2.96,0.31,3.66,1.28,3.26),
  dt_unifi=c(2.26,2.60,6.41,7.23,4.00,3.01,6.48,5.05,5.66))

qc_compounds <- data.frame(
  compound=c("acetaminophen","caffeine","leucine enkephaline","reserpine","sulfadimethoxine","sulfaguanidine","terfenadine","val-tyr-val","verapamil")
  , mz=c(152.0705, 195.0876, 556.2765, 609.2806, 311.0808, 215.0597, 472.3209, 380.2179, 455.2904))
```

```{r}
#Creating new obects with only the part of the data for both data sets. RT and Mobility is rounded to two digits to be compariable to unifi data

#Only keep rows that corresponds to the compounds in qc_compounds
mzmine_subset <- mzmine |> 
  select(id,height,ion_mobility,rt,mz) |> 
  mutate(across(c(rt,ion_mobility),round, 2)) |> 
  mutate(across(mz,round, 4)) |>
  filter(id %in% qc_compounds$compound )

#msdial data is filtered to excluded the rows where mobility is -1.00
#Also only keep rows that corresponds to the qc compounds
msdial_subset <- ms_dial |> 
  select(`Alignment ID`,Average,`Average Rt(min)`,`Average mobility`,`Average Mz`) |> 
  mutate(across(c(`Average Rt(min)`,`Average mobility`),round, 2)) |> 
  mutate(across(`Average Mz`,round, 4)) |>
  filter(`Average mobility` != -1.00 & `Alignment ID` %in% qc_compounds$compound )
```

This is a test to try and find the compounds in unifi in the data sets (mzmine, msdial) by comparing (so far) the rt-values , if they differs not to much from the ones in unifi.

```{r}
#test <- mzmine_subset |> filter(rt %in% unifi$rt_unifi, ignore_row_order=TRUE)
#test <- mzmine_subset |> mutate(hej=case_when(rt/unifi$rt_unifi<=1 ~ "here"          ),ignore_row_order=TRUE)

# Function to subset rows if any value in column A is within a threshold from any value in vector X
subset_rows <- function(df, X, threshold = 0.01) {
  # Check if any value in column A is within threshold from any value in vector X
  rows_to_keep <- apply(abs(outer(df$rt, X, "-")), 1, function(x) any(x < threshold))
  
  # Subset the data frame based on rows to keep
  subset_df <- df[rows_to_keep, ]
  return(subset_df)
}

# Subset the rows
subset_df <- subset_rows(mzmine_subset, unifi$rt_unifi)
print(subset_df)
```

```{r}
#calculate the mass accuracy for mzmine, msdial, and unif based on the qc_compounds values. First the m/z values are sorted from small to large so the calculations can be performed row-wise for the correct compound. Lastly, the results are added to a column in a new object.

qc_compounds <- arrange(qc_compounds, mz)

mass_errors <- as.data.frame(qc_compounds[1:2])

mzmine_subset <- mzmine_subset |> arrange(mz) |> mutate(Mass_error_ppm = round((qc_compounds$mz-mz)/qc_compounds$mz*10^6,3))

msdial_subset <- msdial_subset |> arrange(`Average Mz`) |> mutate(Mass_error_ppm = round((qc_compounds$mz - `Average Mz`) /qc_compounds$mz * 10^6,3))

unifi <- unifi |> arrange(mz_unifi) |> mutate(Mass_error_ppm = round((qc_compounds$mz - mz_unifi) /qc_compounds$mz * 10^6,3))


mass_errors$Mzmine <- mzmine_subset$Mass_error_ppm
mass_errors$MsDial <- msdial_subset$Mass_error_ppm
mass_errors$Unifi <- unifi$Mass_error_ppm

#Adds a column that tells if the Mzmine or MsDial Mass errors are close or far away from the error of Unifi
mass_errors <- mass_errors |> mutate(mzmine_fromunifi = case_when(abs(Unifi - Mzmine) > 2 ~ "Large",
                                                   abs(Unifi - Mzmine) <= 2 & abs(Unifi - Mzmine) > 0.3 ~ "Medium",
                                                   abs(Unifi - Mzmine) <= 0.3 ~ "Small")) |> 
  mutate(msdial_fromunifi = case_when(abs(Unifi - MsDial) > 2 ~ "Large",
                                                   abs(Unifi - MsDial) <= 2 & abs(Unifi - MsDial) > 0.3 ~ "Medium",
                                                   abs(Unifi - MsDial) <= 0.3 ~ "Small"))
  
```

```{r}
#Plot the ms
mass_errors$msdial_fromunifi <- as.factor(mass_errors$msdial_fromunifi)
mass_errors$mzmine_fromunifi <- as.factor(mass_errors$mzmine_fromunifi)
  
p <- ggplot(data=mass_errors, mapping=aes(x=mz))+
  geom_point(aes(y=Mzmine, colour="Mzmine", shape="Mzmine", size=mzmine_fromunifi), alpha = 0.7)+
  geom_point(aes(y=MsDial, colour="MsDial", shape="MsDial", size=msdial_fromunifi), alpha = 0.7)+
  geom_line(aes(y=Unifi, colour="Unifi"),size=0.5)+
  
  scale_size_manual(name="Distance from Unifi", values = c("Large"=4.2, "Medium"=2.8, "Small"=2))+
  scale_shape_manual(values = c("Mzmine" = 19, "MsDial" = 17)) +
  scale_colour_manual(values = c("Mzmine" = "darkred", "MsDial" = "black", "Unifi" = "darkgrey")) + #colours of points
  labs(fill = "", y = "Mass Accuracy [ppm]", x=expression(paste("Theoretical ",italic("m/z"), " values"))) +
  
  geom_hline(yintercept = 0, linetype = "dashed", color = "red", size = 0.1) + #adds horzontal line at y=0
  
  theme_minimal()+
  theme(
    panel.background = element_rect(fill = "white"),  # Set white background
    panel.grid = element_blank(),  # Remove grid lines
    axis.text = element_text(size = 9),  # Increase font size of axis text
    axis.title.y = element_text(size = 9,face = "bold"),  # Make y-axis label bold and italic
    axis.text.y = element_text(color = "black", size = 9),  # Make x-axis text bold
    axis.title.x = element_text(size = 10,face = "bold"),
    axis.text.x = element_text(color = "black", size = 9),  # Make x-axis text bold
    axis.ticks.x = element_line(color = "black"),  # Add ticks to x-axis in black color
    axis.ticks.y = element_line(color = "black"),  # Add ticks to y-axis in black color
    aspect.ratio = 0.5,  # Set aspect ratio
    plot.margin = margin(0.5, 0.5, 0.4, 0.5, "cm"),  # Set plot margins
    legend.text=element_text(size=9),
    legend.position = "right",
    legend.background = element_rect(fill="white",
                                   size=0.5, linetype="solid", 
                                   colour ="black"),
    #legend.title = element_blank(), #removes the title of the legend
    legend.title = element_text(size=9),
    legend.margin = margin(0.001, 1, 0.5, 0.5),)

p  + geom_text(aes(x=mz+10, y=Unifi,label=compound), size=2, colour="red4",
               nudge_x = 0.25, nudge_y = 0.25, 
               check_overlap = FALSE) #adds a text for the mean point

#+ guides(size = "none")

```

```{r}
#RT and DT difference between MS-Dial and Mzmine compared to UNIFI

#adding and then renaming the RT columns from each file
rt_difference <- data.frame(qc_compounds[,], msdial_subset[,3], mzmine_subset[,4], unifi[,3]) |> rename(MsDial_RT="Average.Rt.min.", MzMine_RT="rt", Unifi_RT="unifi...3.")
#adding and then renaming the DT columns from each file
dt_difference <- data.frame(qc_compounds[,], msdial_subset[,4], mzmine_subset[,3], unifi[,4]) |> rename(MsDial_DT="Average.mobility", MzMine_DT="ion_mobility", Unifi_DT="unifi...4.")


#rt_difference <- rt_difference |> mutate(mzmine_fromunifi = case_when(abs(Unifi - Mzmine) > 2 ~ "Large",
#                                                   abs(Unifi_RT - MzMine_RT) <= 2 & abs(Unifi_RT - MzMine_RT) > 0.3 ~ "Medium",
#                                                   abs(Unifi_RT - MzMine_RT) <= 0.3 ~ "Small")) |> mutate(msdial_fromunifi = case_when(abs(Unifi_RT - MsDial_RT) > 2 ~ "Large",
#                                                   abs(Unifi_RT - MsDial_RT) <= 2 & abs(Unifi_RT - MsDial_RT) > 0.3 ~ "Medium",
#                                                   abs(Unifi_RT - MsDial_RT) <= 0.3 ~ "Small"))

rt_difference_long <- rt_difference |> pivot_longer(cols = 3:5,
                            names_to = "Software",
                            values_to = "RT_softwares") 
```

```{r}
b <- ggplot(data=rt_difference_long, mapping=aes(x=mz, y=RT_softwares, fill=as.factor(Software)))+
  geom_bar(stat = "identity",position=position_dodge())+
  
  scale_fill_manual(values = c("MzMine_RT" = "darkred", "MsDial_RT" = "darkgreen", "Unifi_RT" = "darkgrey")) + #colours of points
  labs( y = "Retention time [min]", x=expression(paste("Theoretical ",italic("m/z"), " values"))) +
  
  theme_minimal()+
  theme(
    panel.background = element_rect(fill = "white"),  # Set white background
    panel.grid.major = element_blank(),  # Remove grid lines
    panel.grid.minor = element_blank(),  # Remove grid lines
    axis.text = element_text(size = 9),  # Increase font size of axis text
    axis.title.y = element_text(size = 9,face = "bold"),  # Make y-axis label bold and italic
    axis.text.y = element_text(color = "black", size = 9),  # Make x-axis text bold
    axis.title.x = element_text(size = 10,face = "bold"),
    axis.text.x = element_text(color = "black", size = 9),  # Make x-axis text bold
    axis.ticks.x = element_line(color = "black"),  # Add ticks to x-axis in black color
    axis.ticks.y = element_line(color = "black"),  # Add ticks to y-axis in black color
    #aspect.ratio = 1,  # Set aspect ratio
    plot.margin = margin(0.5, 0.5, 0.4, 0.5, "cm"),  # Set plot margins
    legend.text=element_text(size=9),
    #legend.position = c(0.85, 0.85),
    legend.background = element_rect(fill="white",
                                   size=0.5, linetype="solid", 
                                   colour ="black"),
    legend.title = element_blank(),
    #legend.margin = margin(0.001, 1, 0.5, 0.5)
)

b + geom_text(aes(x=mz, y=RT_softwares, label=compound), size=2, colour="red4",
               nudge_x = 0.25, nudge_y = 0.25, 
               check_overlap = FALSE) # y=RT_softwares
```
