[
  {
    "objectID": "qc_hdmse_peak.html#drug-mixture",
    "href": "qc_hdmse_peak.html#drug-mixture",
    "title": "3Â  Data Analysis - QC mix",
    "section": "3.1 Drug mixture",
    "text": "3.1 Drug mixture\nTo compare the drug mixture (200 ppb) measured in ESI(+)-LC-IMS-HRMS (MSe mode, HDMSe). Data is from old settings and new setting that is supposed to be more suitable for labile compounds.\n\n#library(tidyverse), library(readxl), library(ggrepel), library(ggpubr)\ndata_drugmix &lt;- read_csv(\"~/Project/hrms_converter-2024/new_old_settings_drugmix_featurelist_MzMine.csv\", show_col_types = FALSE) |&gt; \n  select(-`charge`,-`fragment_scans`,-`alignment_scores:rate`, -`alignment_scores:aligned_features_n`,-`alignment_scores:align_extra_features`,-`alignment_scores:weighted_distance_score`,-`alignment_scores:mz_diff_ppm`,-`alignment_scores:mz_diff`,-`alignment_scores:rt_absolute_error`,-`alignment_scores:ion_mobility_absolute_error`,-`intensity_range:min`,-`intensity_range:max`)\n\ntarget_drugs &lt;- read_excel(\"~/Project/hrms_converter-2024/illicit drugs CS-IS_data.xlsx\", na = \"NA\") |&gt; \n  filter(Class==\"Analyte\") |&gt; \n  mutate(rt_target_min = Vion_RT - 0.05) |&gt; \n  mutate(rt_target_max = Vion_RT + 0.05) |&gt; \n  select(-`Monoisomass`, -`Adduct_ion`,  -`Vion_observed_mz`, -`Agilent_observed_mz`, -`Agilent_RT`)\n\n\nfound_drugs &lt;- target_drugs |&gt; inner_join(data_drugmix, join_by(overlaps(\"Theor_adduct_mz\",\"Theor_adduct_mz\",\"mz_range:min\", \"mz_range:max\"))) |&gt; \n  select(1:11, mz, height, everything()) #reorder columns\n\n#found_drugs |&gt; filter(\n#  !(is.na(Vion_RT) & `height` &lt; 500), #removes those without RT that has height less than 500\n#  !(!is.na(Vion_RT) & (\"rt\" &lt; \"rt_target_min\" & \"rt\" &gt; \"rt_target_max\")) #for those with RT, filter according to rt similarities\n#)\n\nfiltered_found_drugs &lt;-found_drugs |&gt; filter(\n  !(`height` &lt; 500), #removes rows with height less than 500\n  !(!is.na(Vion_RT) & (\"rt\" &lt; \"rt_target_min\" & \"rt\" &gt; \"rt_target_max\")) #for those with prev. measured RT, compares them with currect RT\n) |&gt; \n  slice_max(by=Compound, height) #to remove multiple features assigned the same compound by only keeping the ones with largest height. Due to not having any DT values to compare to filter the data more\n\n\nfiltered_found_drugs &lt;- filtered_found_drugs |&gt; \n  mutate(Mass_error_ppm = mass_error(Theor_adduct_mz, mz), .after = \"mz\")|&gt;  #adds the mass error (calculated with the function) to a new column after m/z values\n  mutate(height_ratio = `datafile:Drugdtd-200ppb-newsetting_1_A,2_1.mzML:height`/`datafile:Drugstd-200ppb_1_A,3_1.mzML:height`, .after=\"height\") |&gt; #adds the ratio between the height of the old and new settings \n  mutate(area_ratio = `datafile:Drugdtd-200ppb-newsetting_1_A,2_1.mzML:area`/`datafile:Drugstd-200ppb_1_A,3_1.mzML:area`, .after=\"area\")\n\n\np1 &lt;-ggplot(filtered_found_drugs, mapping = aes(x=mz, y=area_ratio, label=Compound))+ #plot area ratio\n  geom_point()+\n  geom_hline(yintercept = 1, linetype = \"dashed\", color = \"red\", linewidth = 0.1) + #adds horzontal line at y=0\n  \n  geom_label_repel(size = 2.5,\n                   point.padding = NA, # additional padding around each point\n                   min.segment.length = 0, # draw all line segments\n                   force=2,\n                   nudge_x=5, nudge_y=-0.03\n                   )+\n  \n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid.major = element_blank(),  # Remove grid lines\n    panel.grid.minor = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    plot.margin = margin(0.5, 0.5, 0.4, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=9),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(),\n)\np2 &lt;- ggplot(filtered_found_drugs, mapping=aes(x=mz,y=height_ratio,label=Compound))+ #plot height ratio\n  geom_point()+\n  geom_hline(yintercept = 1, linetype = \"dashed\", color = \"red\", linewidth = 0.1) + #adds horzontal line at y=0\n  \n  geom_label_repel(size = 2.5,\n                   point.padding = NA, # additional padding around each point\n                   min.segment.length = 0, # draw all line segments\n                   force=2,\n                   nudge_x=5, nudge_y=-0.03\n                   )+\n  \n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid.major = element_blank(),  # Remove grid lines\n    panel.grid.minor = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    plot.margin = margin(0.5, 0.5, 0.4, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=9),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(),\n) \n\nggarrange(p1, p2,\n          labels = c(\"A\", \"B\"),\n          #ncol = 1, nrow = 2,\n          widths = 2, heights = 10)\n\n\n\n\n\ntarget_IS &lt;- read_excel(\"~/Project/hrms_converter-2024/illicit drugs CS-IS_data.xlsx\", na = \"NA\") |&gt; \n  filter(Class==\"IS\") |&gt; \n  select(-`Monoisomass`, -`Adduct_ion`,  -`Vion_observed_mz`, -`Agilent_observed_mz`, -`Agilent_RT`)\n\n\nfound_IS &lt;- target_IS |&gt; inner_join(data_drugmix, join_by(overlaps(\"Theor_adduct_mz\",\"Theor_adduct_mz\",\"mz_range:min\", \"mz_range:max\"))) |&gt; \n  select(1:11, mz, height, everything()) |&gt;  #reorder columns \n  mutate(Mass_error_ppm = mass_error(Theor_adduct_mz, mz), .after = \"mz\")\n  \nfiltered_found_IS &lt;- found_IS |&gt;  slice_min(by=Compound, abs(Mass_error_ppm)) #only keeps the rows with the smallest absolut mass error for each compound\n\n\nnormalisation_IS &lt;- inner_join(x=filtered_found_drugs, y=filtered_found_IS, join_by(x$Formula == y$Formula)) |&gt; \n  mutate(normalised_height_NEW = `datafile:Drugdtd-200ppb-newsetting_1_A,2_1.mzML:height.x`/`datafile:Drugdtd-200ppb-newsetting_1_A,2_1.mzML:height.y`, .after=\"height.x\") |&gt; \n  mutate(normalised_height_OLD = `datafile:Drugstd-200ppb_1_A,3_1.mzML:height.x`/`datafile:Drugstd-200ppb_1_A,3_1.mzML:height.y`, .after=\"height.x\") |&gt; \n  mutate(RT_diff = rt.x-rt.y, .after=\"rt.x\") |&gt; \n  mutate(mz_error_diff = Mass_error_ppm.x-Mass_error_ppm.y, .after=\"mz.x\") |&gt; \n  mutate(DT_diff = ion_mobility.x-ion_mobility.y, .after=\"ion_mobility.x\")\n\n######################################################################\nnormalisation_IS$plot &lt;- NA #empy column to put plot in\nplot_object &lt;- ggplot(data = normalisation_IS, aes(x=normalised_height_OLD, y=normalised_height_NEW))+geom_point(colour=\"darkgreen\")+theme_minimal()+theme(legend.position=\"none\")  #create plot object to put in empty colum in the table\n\n#library(gt) #package for makeing tables + library(gtExtras) # plot in table\n\n#creates a table of selected column from normalisation_IS data\n gt_tab &lt;- normalisation_IS |&gt; select(Compound.x, Formula, RT_diff, DT_diff, mz_error_diff, normalised_height_OLD, normalised_height_NEW,plot) |&gt; \n    gt() |&gt;\n   tab_options(table.font.color=\"black\")|&gt; \n    tab_header(\n      title=md(\"**Drug mixture - 200 ppb**\"), #**to make bold\n      subtitle =md(\"For **new** and **old** MS settings analytes with corresponding *Internal Standard*\") #* to make italic\n      ) |&gt; \n    fmt_number(columns = c(RT_diff, DT_diff, mz_error_diff,normalised_height_OLD, normalised_height_NEW), decimals=3) |&gt;  #to formate numbers, can select specific columns to display certain nr. of deicmals for example. \n    tab_footnote(\n    footnote = \"Isomeric compounds. They have been matched to the same feature, hence, the reason for the identical values.\",\n    locations = cells_body(columns = Compound.x, rows = 1:2)\n  ) |&gt; \n    tab_footnote(\n    footnote = md(\"The large mass error difference between *analyte* and *IS* is due to a larger mass error for the corresponding IS (10.9 compared to analyte -0.101)\"),\n    locations = cells_body(\n      columns = mz_error_diff,\n      rows = mz_error_diff == min((mz_error_diff))\n    )\n  ) |&gt; \n    tab_row_group(\n    label = md(\"*Methamphetamine-d9*\"), #or can use gt(groupname_col=\"Compound.y\") to add groupnames for all analytes\n    rows = 1:2\n  ) |&gt; \n    tab_spanner(\n    label = \"Analyte Information\",\n    columns = c(Compound.x, Formula)\n  ) |&gt; \n    tab_spanner(\n    label = md(\"Normalisation as &lt;br&gt; *analyte_height/IS_height*\"),\n    columns = c(normalised_height_OLD, normalised_height_NEW)\n  )|&gt; \n    tab_spanner(\n    label = md(\"Differences as &lt;br&gt; *Analyte* - *IS*\"),\n    columns = c(RT_diff, DT_diff, mz_error_diff)\n  ) |&gt; \n    cols_label(\n    Compound.x = html(\"Analyte Name\"),\n    Formula = html(\"Molecular formula\"),\n    RT_diff = html(\"Retention Time ,&lt;br&gt;min\"),\n    DT_diff = html(\"Drift Time ,&lt;br&gt;ms\"),\n    mz_error_diff = html(\"Mass Error,&lt;br&gt;ppm\"),\n    normalised_height_OLD = html(\"OLD\"),\n    normalised_height_NEW = html(\"NEW\"),\n  ) |&gt; \n   tab_style(\n    style = list(\n      cell_fill(color = \"lightcyan\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_body(\n      columns = normalised_height_OLD\n    ) \n  ) |&gt; \n     tab_style(\n    style = list(\n      cell_fill(color = \"#F9E3D6\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_body(\n      columns = normalised_height_NEW\n    ) \n  ) |&gt; \n    tab_style(\n    style = list(\n      cell_text(color=\"red\")\n      ),\n    locations = cells_body(\n      columns = mz_error_diff,\n      rows = mz_error_diff ==min((mz_error_diff))\n    ) \n  )|&gt; \n   text_transform(\n     locations = cells_body(columns = plot),\n     fn = function(x) {\n       plot_object |&gt; \n         ggplot_image((height=px(200)))\n     }\n   )\ngt_tab\n\n\n\n\n\n  \n    \n      Drug mixture - 200 ppb\n    \n    \n      For new and old MS settings analytes with corresponding Internal Standard\n    \n    \n      \n        Analyte Information\n      \n      \n        Differences as  Analyte - IS\n      \n      \n        Normalisation as  analyte_height/IS_height\n      \n      plot\n    \n    \n      Analyte Name\n      Molecular formula\n      Retention Time ,min\n      Drift Time ,ms\n      Mass Error,ppm\n      OLD\n      NEW\n    \n  \n  \n    \n      Methamphetamine-d9\n    \n    Phentermine1\nC10H15N\n0.017\n0.000\n1.115\n0.642\n0.365\n\n    Methamphetamine1\nC10H15N\n0.017\n0.000\n1.115\n0.642\n0.365\n\n    \n      \n    \n    MDMA\nC11H15NO2\n0.015\nâ0.024\nâ1.235\n1.716\n1.290\n\n    MDEA\nC12H17NO2\n0.012\nâ0.024\nâ0.635\n1.663\n2.001\n\n    Benzoylecgonine\nC16H19NO4\n0.000\n0.000\nâ0.404\n2.419\n2.320\n\n    THC-COOH\nC21H28O4\nâ0.002\nâ0.095\n2Â â11.002\n3.269\n2.502\n\n  \n  \n  \n    \n      1 Isomeric compounds. They have been matched to the same feature, hence, the reason for the identical values.\n    \n    \n      2 The large mass error difference between analyte and IS is due to a larger mass error for the corresponding IS (10.9 compared to analyte -0.101)\n    \n  \n\n\n\n#gt_tab |&gt; gtsave(filename = \"tab_1.html\") #saves the table in HTML format\n#gt_tab |&gt; gtsave(filename = \"tab_1.tex\") #saves the table in LaTEX format\n#gt_tab |&gt; gtsave(filename = \"tab_1.docx\") #saves the table in WORD format\n\n\n\nagg_iris = normalisation_IS  |&gt; \n    group_by(Compound.x)  |&gt; \n    reframe(\n        normalised_height= list(normalised_height_OLD, normalised_height_NEW),\n    )\n\nagg_iris |&gt; gt() |&gt; gt_plt_sparkline(column = normalised_height)\n\n`geom_line()`: Each group consists of only one observation.\nâ¹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nâ¹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nâ¹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nâ¹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nâ¹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nâ¹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nâ¹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nâ¹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nâ¹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nâ¹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nâ¹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nâ¹ Do you need to adjust the group aesthetic?\n\n\n\n\n\n\n  \n    \n      Compound.x\n      normalised_height\n    \n  \n  \n    Benzoylecgonine\n          2.4\n    Benzoylecgonine\n          2.3\n    MDEA\n          1.7\n    MDEA\n          2.0\n    MDMA\n          1.7\n    MDMA\n          1.3\n    Methamphetamine\n          0.6\n    Methamphetamine\n          0.37\n    Phentermine\n          0.6\n    Phentermine\n          0.37\n    THC-COOH\n          3.3\n    THC-COOH\n          2.5\n  \n  \n  \n\n\n\n\n\nTidyMass\n\n#source(\"https://www.tidymass.org/tidymass-packages/install_tidymass.txt\")\n#install_tidymass(from = \"tidymass.org\")"
  },
  {
    "objectID": "Data_vis.html#import-export-data",
    "href": "Data_vis.html#import-export-data",
    "title": "2Â  Data Visualisation",
    "section": "2.1 Import/ Export data",
    "text": "2.1 Import/ Export data\nData can be imported in R in different ways. In the Environment tab, there is an import-data button, in which it is possible to select the type of data (e.g.Â Excel). From that tab it is possible to receive the command needed if one wants to have it in a script.\nTo import .csv data, the read.csv() (or read_csv()) function can be used:\ncsv_data &lt;- read.csv(\"csv file location\")\nIt is also possible to easily export data to a csv-file by using the function write.csv() :\nwrite.csv(\"name of data\", \"name of the file to export to (and location if other than working directory)\", row.names = FALSE) row.names = FALSE to remove the row names to be written in the output.\nFor importing data from an Excel-file, the package readxl package can be used. In the package, the function read_excel() can be used which requires the location of the file and to import a specific sheet, the argument sheet= \"name of the sheet\" can be used.\n\nlibrary(readxl)\n#Will import the sheet \"Ovwerview\" from the Excel-file \"Statistics_Kumla_20200408\" and save it in the object \"Data_Kumla\"\nData_Kumla &lt;- read_excel(\"~/Courses/R_Course/Statistics_Kumla_20200408.xlsx\", sheet = \"Overview\")\n\nThe imported data will be a data frame."
  },
  {
    "objectID": "Data_vis.html#basic-plotting",
    "href": "Data_vis.html#basic-plotting",
    "title": "2Â  Data Visualisation",
    "section": "2.2 Basic Plotting",
    "text": "2.2 Basic Plotting\nPlots can be made by using the Base R functions.\n\n#Scatter plot of the data in column \"PFOS\" and \"sum_PFOS\"\nplot(x=Data_Kumla$PFOS, y=Data_Kumla$sum_PFOS,\n     xlab = \"PFOS concentration [ng/L]\", #adds x-axis title\n     ylab = \"sum_PFOS [ng/L]\", #adds y-axis title\n     pch = 16, #solid circles, pch=1 unfilled cicles\n     cex.lab=0.75, #changes font size of axis titels, 1 is default size\n     cex.axis=0.75, #changes font size of axis values\n     cex = 0.6, #changes point size\n     col=\"darkred\") \n\ngrid(lty=1, col=\"lightgrey\", lwd=1) #adds a grid\n\nlines(lowess(Data_Kumla$PFOS, Data_Kumla$sum_PFOS),\n      col=\"black\", lwd=2, lty=2) #adds a local regression line as a black colour dashed (lty=2) line with line width 2\n\nabline(lm(Data_Kumla$sum_PFOS ~ Data_Kumla$PFOS, data=Data_Kumla), col=\"darkgrey\", lwd=2, lty=3) #adds regression line in darkgrey colour\n\nlegend(x=\"topleft\", legend=c(\"Scatter plot\", \"LOWESS\", \"Linear regression\"), fill=c(\"darkred\",\"black\",\"darkgrey\"),\n       cex=0.5)\n\n\n\n\nOther plot types:\n\nData_Kumla$`Sampling site`&lt;- factor(Data_Kumla$`Sampling site`)\n\nbarplot(height=Data_Kumla$PFOS,\n        ylab=\"Sampling site\",\n        xlab=\"PFOS concentraion [ng/L]\",\n        col= c(\"darkred\",\"darkgreen\",\"darkblue\"),\n        cex.axis = 0.75,\n        cex.names = 0.75,\n        legend.text=c(\"K1\", \"KS\", \"KRef\"),\n        args.legend=list(x=\"bottomright\", cex=0.5),\n        horiz = TRUE,\n        xlim = c(0, max(Data_Kumla$PFOS)+75))\n\nbox() #adds box around the plot"
  },
  {
    "objectID": "Data_vis.html#tidyverse",
    "href": "Data_vis.html#tidyverse",
    "title": "2Â  Data Visualisation",
    "section": "2.3 Tidyverse",
    "text": "2.3 Tidyverse\nTidyverse contains a collection of packages. All the functions from the packages follow the same type of structure, making them easier to use. The core packages included in Tidyverse are ggplot2, dplyr, tidyr, readr, purr, tibble, stringr, and forcats.\n\n\n\n\n\n\n\nreadr\nfor reading rectangular data from e.g.Â .csv by using read_csv()\n\n\ntidyr\nfor organising tabular data e.g.Â pivot_longer() to combine multiple columns to a long table\n\n\npurr\ncan be used to exchange For Loops with code e.g.Â by using map() to apply a function to all elements in a list and returns a list\n\n\ndplyr\ncan be used for data manipulations e.g.Â by piping\n\n\n\nTidy data: Each variable is a column, each column is a variable. Each observation is a row, each row is an observation. Each value is a cell, each cell is a single value.\n\n2.3.1 Pipes\nIs a way to simplify R code. By using %&gt;% (or |&gt;, shortcut: ctrl+shift+m) code can be rewritten to become easier interpretated. The symbol can be thought of as a â+â symbol.\nFor example, if you would like to only have the concentrations of PFOS in Data_Kumla above 100 ng/L. Instead of having to use For loops and/or if statements or other type of commands, it can simply be written using pipe operations:\n\nlibrary(tidyverse)\nPFOS_above100 &lt;- Data_Kumla |&gt; select(PFOS)|&gt; filter(PFOS&gt;100)\n#or use %&gt;% instead of |&gt;, first requires paranthesis when calling functions, second does not\nPFOS_above100\n\n# A tibble: 65 Ã 1\n    PFOS\n   &lt;dbl&gt;\n 1  229.\n 2  140.\n 3 1045.\n 4  442.\n 5  540.\n 6  223.\n 7  976.\n 8  559.\n 9  830.\n10  162.\n# â¹ 55 more rows\n\n\nOr in situation when nested function i used. E.g. want to the mean of the PFOS concentrations and round it to 1 decimal.\n\nmean_PFOS &lt;- round(mean(Data_Kumla$PFOS),1)\nmean_PFOS\n\n[1] 321.5\n\n\nHowever, by using pipe operation it becomes more readable:\n\nmean_PFOS_pipe &lt;- Data_Kumla$PFOS %&gt;% mean %&gt;% round(1)\nmean_PFOS_pipe\n\n[1] 321.5\n\n\n\n\n2.3.2 ggplot2\nggplot2 can be used to make plots in R instead of using the base R functions.\n\nrequire(ggpubr) #reqiured to add regression equation\n\nLoading required package: ggpubr\n\nmean_data &lt;- data.frame(a=mean(Data_Kumla$PFOS), b=mean(Data_Kumla$sum_PFOS))\np &lt;- ggplot(data=Data_Kumla, mapping=aes(x=PFOS, y=sum_PFOS))+\n  geom_point(size=0.6, aes(colour=\"Scatter plot\"))+\n  geom_smooth(method=\"loess\", size=0.6, aes(colour=\"LOWESS\"), se=FALSE,linetype=\"longdash\")+\n  geom_smooth(method=\"lm\", size=0.6, aes(colour=\"Linear regression\"), se=FALSE, linetype=\"dashed\")+\n  stat_regline_equation(label.x=1300, label.y=580, colour=\"darkgrey\", size=3)+ #adds regression equation\n  stat_cor(aes(label=..rr.label..), label.x=1300, label.y=420, size=3, colour=\"darkgrey\", r.digits = 4)+ #adds R^2\n  scale_color_manual(values = c(\"Scatter plot\" = \"darkred\", \"LOWESS\" = \"black\", \"Linear regression\" = \"darkgrey\")) + #colours of points\n  \n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    aspect.ratio = 1,  # Set aspect ratio\n    plot.margin = margin(0.5, 0.5, 0.4, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=9),\n    legend.position = c(0.25, 0.85),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(), #removes the title of the legend\n    legend.margin = margin(0.001, 1, 0.5, 0.5))+\n  geom_point(data=mean_data, aes(x=a,y=b), colour=\"black\",size=3, alpha=0.9, shape=21, fill=\"salmon\") #highlights the mean point in red\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nâ¹ Please use `linewidth` instead.\n\n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nâ¹ Please use the `linewidth` argument instead.\n\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nâ¹ Please use the `legend.position.inside` argument of `theme()` instead.\n\np+ geom_text(aes(mean(PFOS)+350, mean(sum_PFOS)+10,label=paste(\"Mean point\")), size=3, colour=\"red4\") #adds a text for the mean point\n\nWarning: The dot-dot notation (`..rr.label..`) was deprecated in ggplot2 3.4.0.\nâ¹ Please use `after_stat(rr.label)` instead.\n\n\nWarning in geom_text(aes(mean(PFOS) + 350, mean(sum_PFOS) + 10, label = paste(\"Mean point\")), : All aesthetics have length 1, but the data has 108 rows.\nâ¹ Did you mean to use `annotate()`?\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n#p+ geom_point(data=Data_Kumla, aes(x=PFOSA, y=sum_PFOS), colour=\"pink\")\n\n\nggscatter(data=Data_Kumla,x=\"PFOS\", y=\"sum_PFOS\", add=\"reg.line\")+\n  stat_cor(label.x=1300, label.y=750)+\n  stat_regline_equation(label.x=1300, label.y=480)\n\n\n\n\n\nsampling &lt;- as.factor(Data_Kumla$`Sampling site`)\nb &lt;- ggplot(data=Data_Kumla, aes(x=sampling, y=PFOS, fill=sampling))+\n  geom_bar(stat = \"identity\", width = 0.5, colour=\"black\",position=position_dodge())+\n  scale_fill_manual(values = c(\"K1\" = \"darkblue\", \"KS\" = \"darkgreen\", \"KRef\" = \"darkred\"))+\n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid.major = element_blank(),  # Remove grid lines\n    panel.grid.minor = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    #aspect.ratio = 1,  # Set aspect ratio\n    plot.margin = margin(0.5, 0.5, 0.4, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=9),\n    #legend.position = c(0.85, 0.85),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(),\n    #legend.margin = margin(0.001, 1, 0.5, 0.5)\n)\n\nb\n\n\n\n\n\nb2 &lt;- ggplot(data=Data_Kumla, aes(x=PFOS,fill=sampling))+\n  geom_bar(stat = \"bin\", binwidth = 108, colour=\"black\",position=position_dodge())+\n  scale_fill_manual(values = c(\"K1\" = \"darkblue\", \"KS\" = \"darkgreen\", \"KRef\" = \"darkred\"))+\n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid.major = element_blank(),  # Remove grid lines\n    panel.grid.minor = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    #aspect.ratio = 1,  # Set aspect ratio\n    plot.margin = margin(0.5, 0.5, 0.4, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=9),\n    #legend.position = c(0.85, 0.85),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(),\n    #legend.margin = margin(0.001, 1, 0.5, 0.5)\n)\n\nb2\n\n\n\n\n\n\n#http://www.sthda.com/english/wiki/ggplot2-barplots-quick-start-guide-r-software-and-data-visualization \n\n#+++++++++++++++++++++++++\n# Function to calculate the mean and the standard deviation\n  # for each group\n#+++++++++++++++++++++++++\n# data : a data frame\n# varname : the name of a column containing the variable\n  #to be summariezed\n# groupnames : vector of column names to be used as\n  # grouping variables\n\ndata_summary &lt;- function(data, varname, groupnames){\n  require(plyr)\n  summary_func &lt;- function(x, col){\n    c(mean = mean(x[[col]], na.rm=TRUE),\n      sd = sd(x[[col]], na.rm=TRUE))\n  }\n  data_sum&lt;-ddply(data, groupnames, .fun=summary_func,\n                  varname)\n  data_sum &lt;- rename(data_sum, c(\"mean\" = varname))\n return(data_sum)\n}\n\n\n#another way to calculate mean and sd, notice data_pfas created below with pivot_longer(). Could use Data_Kumla and summarize on selected columns instead.\ndata_pfas |&gt; group_by(Type_of_PFAS) |&gt; summarize(Conc_mean = mean(Conc_of_PFAS), Cond_SD = sd(Conc_of_PFAS)) \n\n\ndata_pfas &lt;- Data_Kumla |&gt; pivot_longer(cols = 13:31,\n                            names_to = \"Type_of_PFAS\",\n                            values_to = \"Conc_of_PFAS\") |&gt;\n                        select(c(`Sampling site`, Type_of_PFAS, Conc_of_PFAS))\n\ndata_pfas_sd &lt;- data_pfas |&gt; data_summary(varname=\"Conc_of_PFAS\", groupnames=\"Type_of_PFAS\") |&gt; filter(Conc_of_PFAS &lt;100) #exclude PFAS above 100 in mean concentration\n\nLoading required package: plyr\n\n\n------------------------------------------------------------------------------\n\n\nYou have loaded plyr after dplyr - this is likely to cause problems.\nIf you need functions from both plyr and dplyr, please load plyr first, then dplyr:\nlibrary(plyr); library(dplyr)\n\n\n------------------------------------------------------------------------------\n\n\n\nAttaching package: 'plyr'\n\n\nThe following object is masked from 'package:ggpubr':\n\n    mutate\n\n\nThe following objects are masked from 'package:dplyr':\n\n    arrange, count, desc, failwith, id, mutate, rename, summarise,\n    summarize\n\n\nThe following object is masked from 'package:purrr':\n\n    compact\n\nggplot(data=data_pfas_sd, aes(y=Conc_of_PFAS, x=Type_of_PFAS, fill=Type_of_PFAS))+\n  geom_bar(stat = \"identity\",position=position_dodge())+\n  geom_errorbar(aes(ymin=Conc_of_PFAS-sd, ymax=Conc_of_PFAS+sd), width=0.2, position=position_dodge(0.9))+ #add errorbars\n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid.major = element_blank(),  # Remove grid lines\n    panel.grid.minor = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9, angle=45, hjust=1),  # Make x-axis text bold and in an angle\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    #aspect.ratio = 1,  # Set aspect ratio\n    plot.margin = margin(0.5, 0.5, 1, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=7),\n    #legend.position = c(0.85, 0.85),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(),\n    #legend.margin = margin(0.001, 1, 0.5, 0.5)'\n)\n\n\n\n\n\n#excludes PFOS that has higher concentrations\ndata_pfas |&gt; filter(Type_of_PFAS != c(\"PFOS\")) |&gt;\nggplot(mapping=aes(x=Type_of_PFAS, y=Conc_of_PFAS, fill=Type_of_PFAS))+\n  geom_boxplot(outlier.color = \"darkred\", outlier.shape=16, outlier.size = .6, notch=FALSE)+ #log of conc. values\n  geom_line(data=data_pfas_sd, aes(x = Type_of_PFAS, y = Conc_of_PFAS), size = 1, color=\"red\", group = 1)+ #log of mean values\n  \n  stat_boxplot(geom = \"errorbar\",\n                   width = 0.25)+\n  stat_summary(fun.y=mean, geom=\"point\", shape=20, size=4, color=\"red\", fill=\"red\", alpha=0.7) +\n  \n  scale_y_log10()+\n  \n  labs(x = \"Type of PFAS\", y = \"log(Concentration of PFAS)\", color= \"\") +\n\n  \n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid.major = element_blank(),  # Remove grid lines\n    panel.grid.minor = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9, angle=45, hjust=1),  # Make x-axis text bold and in an angle\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    #aspect.ratio = 1,  # Set aspect ratio\n    plot.margin = margin(0.5, 0.5, 1, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=7),\n    #legend.position = c(0.85, 0.85),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(),\n    #legend.margin = margin(0.001, 1, 0.5, 0.5)'\n)\n\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nâ¹ Please use the `fun` argument instead.\n\n\n\n\n\n\nsampling_pfos &lt;- Data_Kumla |&gt; select(c(`Sampling site`, PFOS))\n\nggplot(data=sampling_pfos, aes(x=`Sampling site`,y=PFOS, fill=`Sampling site`))+\n  geom_boxplot(outlier.color = \"red\", outlier.shape=16, outlier.size = .8, notch=TRUE, aes(y=log(PFOS)))+\n  \n  scale_fill_manual(values=c(\"darkred\", \"darkgreen\", \"darkblue\"))+\n  labs(x = \"Sampling site\", y = \"log(Concentration of PFOS)\", color= \"\") +\n  \n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid.major = element_blank(),  # Remove grid lines\n    panel.grid.minor = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9, angle=45, hjust=1),  # Make x-axis text bold and in an angle\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    #aspect.ratio = 1,  # Set aspect ratio\n    plot.margin = margin(0.5, 0.5, 1, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=7),\n    #legend.position = c(0.85, 0.85),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(),\n    #legend.margin = margin(0.001, 1, 0.5, 0.5)'\n)\n\n\n\n\n\nggplot(data=Data_Kumla)+\n  geom_point(size=0.6, aes(colour=\"Scatter plot\", x=PFOS,y=log(sum_PFOS)))+\n  geom_smooth(method=\"loess\", size=0.8, aes(colour=\"LOWESS\",x=PFOS,y=log(sum_PFOS)), se=TRUE,linetype=\"longdash\")+\n  scale_color_manual(values = c(\"Scatter plot\" = \"darkred\", \"LOWESS\" = \"black\")) + #colours of points\n  \n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    aspect.ratio = 1,  # Set aspect ratio\n    plot.margin = margin(0.5, 0.5, 0.4, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=9),\n    #legend.position = c(0.25, 0.85),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(), #removes the title of the legend\n    legend.margin = margin(0.001, 1, 0.5, 0.5))\n\n`geom_smooth()` using formula = 'y ~ x'"
  }
]