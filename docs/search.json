[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R4EnvChemAnalysis - PhD Course",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nIt was made for the PhD course “R programming for environmental analytical chemistry”, 6 hp, at Linköping University during spring 2024.\nThe aim with the course was to learn basic R programming, learn to write functions for the purpose of analysing enviornmental chemical data, visualise the data, and basic datamanagement creation.\nThis Quarto book has served the purpose of documenting the development during the course."
  },
  {
    "objectID": "Basics.html#simple-commands",
    "href": "Basics.html#simple-commands",
    "title": "1  Basics",
    "section": "1.1 Simple commands",
    "text": "1.1 Simple commands\nObjects is a way to store data in R. Objects can easily be created by using the symbol &lt;-, and that points towards the name of the object. Further, to write comments that can make the written code easier to interpretate # can be used:\n\n#This is a code that creates objects a which contains the sum of 2 + 5\n\na &lt;- 2 + 5\na\n\n[1] 7\n\n#It is also possible to assign a vector of numbers to objects as done here for b which contains the numbers 2,3,4,5,6\n\nb &lt;- c(2:6)\nb\n\n[1] 2 3 4 5 6\n\n#Further, it is possible to use addition, subtraction, etc, on objects.\n\nc &lt;- b+a\nc\n\n[1]  9 10 11 12 13\n\nd &lt;- b*a\nd\n\n[1] 14 21 28 35 42\n\nd &lt;- d - 2\nd\n\n[1] 12 19 26 33 40\n\n#Also, it is possible to use matrix operator on vectors\n\ne1 &lt;- b %*% b #inner multiplication\ne1\n\n     [,1]\n[1,]   90\n\ne2 &lt;- b %o% b #outer multiplication\ne2\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    4    6    8   10   12\n[2,]    6    9   12   15   18\n[3,]    8   12   16   20   24\n[4,]   10   15   20   25   30\n[5,]   12   18   24   30   36\n\n\nImportant: object names cannot start with a number or contain symbols such as ^, !, $, @, +, -, /, *\n\n#2a &lt;- c(2,4)\n\n#Error: unexpected symbol in \"2a\"\n\n\n#object! &lt;- c(1:4)\n\n#Error: unexpected '!' in \"object!\"\n\n\n#However, it is possible to use \"_\" in an objects name\n\nobject_name &lt;- c(5:8)\n\nIf an new objects is given the same name as an existing objects, the content in the objects will be written over by the new content:\n\nf &lt;- 2+6 #objects f is created which contains the sum of 2+6\nf\n\n[1] 8\n\nf &lt;- c(2,4,6) #object f now has the values 2, 4, and 6\nf\n\n[1] 2 4 6\n\n\nTo avoid writing over existing objects, one can either look in the top-right part of RStudio in the “Environment”-tab to see which names are already in use, or can use the command ls()\n\nls()\n\n [1] \"a\"               \"b\"               \"c\"               \"d\"              \n [5] \"e1\"              \"e2\"              \"f\"               \"has_annotations\"\n [9] \"object_name\"     \"x\"              \n\n\n\nWhen a script is running and you would like to cancel it, you can press clrl+c\n\nMore useful functions:\n\nsum(b) #sums a set of values\n\n[1] 20\n\nmean(b) #returns the mean values of a set of values \n\n[1] 4\n\nreplicate(n = 3, a+2) #repeats the command (here a+2) n number of times\n\n[1] 9 9 9\n\ntrunc(3.14) #returns only integers of a number\n\n[1] 3\n\nsample(x = object_name, size = 2, replace = TRUE) #returns random value from x (in this case object_name). size determines number of values to return and replace = TRUE mean the same value can be returned multiple times (if FALSE, will not return same value multiple times)\n\n[1] 7 8\n\na1 &lt;- data.frame(a11=1:10,\n                 a12=2:11)\napply(a1[,1:2], 2, mean) #performs specified function (in this case mean) of column 1 and 2 in a1\n\na11 a12 \n5.5 6.5 \n\napply(a1[,1:2], 1, mean) #performed specified function on each row for the columns 1 and 2 in a1\n\n [1]  1.5  2.5  3.5  4.5  5.5  6.5  7.5  8.5  9.5 10.5\n\nsd(b, na.rm=TRUE) #calculate the standard deviation of vector b and ignoers NA values\n\n[1] 1.581139"
  },
  {
    "objectID": "Basics.html#data-types",
    "href": "Basics.html#data-types",
    "title": "1  Basics",
    "section": "1.2 Data types",
    "text": "1.2 Data types\nThe main data types in R includes\n\nNumeric ⟹ 3.14, 2, 6.022\nInteger ⟹ 2, 3, 4\nComplex ⟹ 4i+5\nLogical ⟹ TRUE/FALSE\nCharacter ⟹ “x”, “hello”, “RT”\n\nTo check if a vector is numeric: is.numeric(\"data\") , returns TRUE if data is numeric (incldues both integers or decimals)\nclass(\"data\") returns the type of data e.g. numeric\ntypeof(\"data\") are more specific, e.g. returns double if data contains decimal numbers\nIf want to change vector to integers can sue as.integer(\"data\")\n\nFactor ⟹ categorical variable, can be used to divide data according to different levels e.g. data has the categories influent and effluent\n\n\ndata &lt;- data.frame(sample_type = as.factor(c(\"influent\", \"effluent\")), #as.factor can be used to convert the type of sample into factor\n                   RT_min = c(1.1,1.1,2.3,2.3,3.4,3.4),\n                   m_z = c(180, 190, 200, 180, 230, 200))\n\nstr(data) #can be used to see structure of data frame\n\n'data.frame':   6 obs. of  3 variables:\n $ sample_type: Factor w/ 2 levels \"effluent\",\"influent\": 2 1 2 1 2 1\n $ RT_min     : num  1.1 1.1 2.3 2.3 3.4 3.4\n $ m_z        : num  180 190 200 180 230 200\n\n\nData frame can be used to store data in a table, similar to Excel. Can have different columns with data (in example above, have columns sample_type , RT_min , and m_z ) and the columns contains data in six rows. The columns can contain different types of data, e.g. character , numeric , logical, but they must have the same length.\nCan extract a certain part of a data frame by using []\n\n#data[row, column]\n\ndata[2] #second columns (RT_min) with all row data\n\n  RT_min\n1    1.1\n2    1.1\n3    2.3\n4    2.3\n5    3.4\n6    3.4\n\ndata[2,] #second row, with all column data\n\n  sample_type RT_min m_z\n2    effluent    1.1 190\n\ndata[,2:3] #column 2 and 3 (RT_min, m_z), all rows\n\n  RT_min m_z\n1    1.1 180\n2    1.1 190\n3    2.3 200\n4    2.3 180\n5    3.4 230\n6    3.4 200\n\ndata[4:6, 2:3] #row 4 to 6, for column 2 and 3\n\n  RT_min m_z\n4    2.3 180\n5    3.4 230\n6    3.4 200\n\ndata[1, c(\"RT_min\")] #returns first value for column named \"RT_min\"\n\n[1] 1.1\n\ndata$RT_min #returns all values from column named \"RT_min\"\n\n[1] 1.1 1.1 2.3 2.3 3.4 3.4\n\ndata$RT_min[1] &lt;- 1.2 #changes first value of column \"RT_min\" to 1.2\ndata$new &lt;- c(1:6) #adds new column \"new\" to the data with the values 1 to 6\n\nTo store data with different lengths, can use lists instead.\n\ndata_list &lt;- list(sample_type = c(\"influent\", \"effluent\"),\n                  retention_time = c(1.1, 2.1, 2.4, 3.0, 4.6, 4.8, 5.3),\n                  m_z = c(180, 190, 200, 210))\n\nstr(data_list)\n\nList of 3\n $ sample_type   : chr [1:2] \"influent\" \"effluent\"\n $ retention_time: num [1:7] 1.1 2.1 2.4 3 4.6 4.8 5.3\n $ m_z           : num [1:4] 180 190 200 210\n\n\n\ndata_list[[1]] #will return first list\n\n[1] \"influent\" \"effluent\"\n\ndata_list[[2]][1:4] #returns first 4 values of list 2\n\n[1] 1.1 2.1 2.4 3.0\n\ndata_list[[3]][3] #returns third value from list 3\n\n[1] 200\n\n\nIf have two objects can compare them with logical tests:\n\nh &lt;- c(1,2,3)\ni &lt;- c(2,2,4)\n\n#elementwise comparison\nh != i #is h not equal to i, so givs TRUE, FALSE, TRUE\n\n[1]  TRUE FALSE  TRUE\n\nh == i #is h equal to i, gives FALSE, TRUE, FALSE\n\n[1] FALSE  TRUE FALSE\n\nj &lt;- 4\n\nj %in% h #is j in h, 4 is not in h\n\n[1] FALSE\n\nj %in% i #is j in i, 4 is in i\n\n[1] TRUE\n\n\n\ndata$new[data$sample_type==\"influent\"] &lt;- \"is influent\" #will write \"is influent\" on the rows in column \"new\" is sample_types equals \"influent\n\nTo check if data has NA\n\ndata$new[data$new==\"is influent\"] &lt;- NA #put \"is influent\" to NA\n\nis.na(data) #returns TRUE if is has NA\n\n     sample_type RT_min   m_z   new\n[1,]       FALSE  FALSE FALSE  TRUE\n[2,]       FALSE  FALSE FALSE FALSE\n[3,]       FALSE  FALSE FALSE  TRUE\n[4,]       FALSE  FALSE FALSE FALSE\n[5,]       FALSE  FALSE FALSE  TRUE\n[6,]       FALSE  FALSE FALSE FALSE"
  },
  {
    "objectID": "Basics.html#writing-functions",
    "href": "Basics.html#writing-functions",
    "title": "1  Basics",
    "section": "1.3 Writing Functions",
    "text": "1.3 Writing Functions\nInstead of using the included functions in R (e.g. plot() ) or in a package (e.g. ggplot() ), it is possible to write your own functions.\nTo make a function, three parts is needed: name, set of arguments, and body of code and has en general layout as: function_name &lt;- function(\"set of arguments\"){\"functions code}\n\n#Function that sums the values in objects \"vector\" without any set of arguments used\nvector &lt;- 1:10\nfirst_function &lt;- function(){\n  output &lt;- sum(vector)\n  return(output)\n}\nfirst_function()\n\n[1] 55\n\n#This function does the same, but here an argument \"samp\" is needed for it to work\nsecond_function &lt;- function(samp){\n  sum_sample &lt;- sum(samp)\n  return(sum_sample)\n}\nsecond_function(samp=vector)\n\n[1] 55\n\n#Same type of function again, but here we have an default value for argument \"samp\", so if the argument is not specifically used, the default it used.\nthird_function &lt;- function(samp=1:4){\n  sum_sample &lt;- sum(samp)\n  return(sum_sample)\n}\nthird_function()\n\n[1] 10\n\nthird_function(samp=vector)\n\n[1] 55\n\n\nIf one has a written some command and want to make it into a function, R can do that for you if you highlight the commands and press Alt + cltr + x (or code &gt; extract function)."
  },
  {
    "objectID": "Basics.html#if-statements-for-loops",
    "href": "Basics.html#if-statements-for-loops",
    "title": "1  Basics",
    "section": "1.4 If Statements/ For Loops",
    "text": "1.4 If Statements/ For Loops\nAn useful way to write code is to use If statements and For loops.\n\nIn If statements, only if a certain criteria is true, a certain command will happen. In R they have the general form of: if(\"criteria\"){\"command to happen if true\"}.\n\n\n#Only if v1 is smaller than v2 will v3 be created as the sum of v1 and v2\nv1 &lt;- 5\nv2 &lt;- 10\nif (v1&lt;v2) {\n  v3 &lt;- v1+v2\n  print(v3)\n}\n\n[1] 15\n\nif (v1&gt;v2) {\n  v4 &lt;- v1+v2\n  print(v4)\n}\n#Returns nothing since statement is not true\n\nIt is also possible to add a “plan B” with if statements by using else{} .\n\n#will return the sum w1 and w2 if the if statment is true, otherwise will take w1-w2\nw1 &lt;- 5\nw2 &lt;- 10\nif (w1&gt;w2) {\n  w3 &lt;- w1+w2\n  print(w3)\n} else {\n  w3 &lt;- w1-w2\n  print(w3)\n}\n\n[1] -5\n\n\n\n#Can combine if statments with function. In this case, if input value of x is larger than 0, will return y as y+x*-1\nx1 &lt;- 2\ny1 &lt;- 3\na_function &lt;- function(x,y){\n  if (x &gt; 0){\n    y &lt;- y+x*-1\n  }\n  return(y)\n}\na_function(x=x1, y=y1)\n\n[1] 1\n\n\n\nIn For loops, certain commands will be repeated for a certain number of times. In R they have the general form of: for(\"item in object\"){\"command as long as item is in object\"}.\n\n\n#The For loop will add the numbers in o1 +1 to the empty vector o2\no1 &lt;- 1:4\no2 &lt;- c()\nfor (i in o1) {\n  o2[i] &lt;- i+1\n}\no2\n\n[1] 2 3 4 5"
  },
  {
    "objectID": "Data_vis.html#import-export-data",
    "href": "Data_vis.html#import-export-data",
    "title": "2  Data Visualisation",
    "section": "2.1 Import/ Export data",
    "text": "2.1 Import/ Export data\nData can be imported in R in different ways. In the Environment tab, there is an import-data button, in which it is possible to select the type of data (e.g. Excel). From that tab it is possible to receive the command needed if one wants to have it in a script.\nTo import .csv data, the read.csv() function can be used:\ncsv_data &lt;- read.csv(\"csv file location\")\nIt is also possible to easily export data to a csv-file by using the function write.csv() :\nwrite.csv(\"name of data\", \"name of the file to export to (and location if other than working directory)\", row.names = FALSE) row.names = FALSE to remove the row names to be written in the output.\nFor importing data from an Excel-file, the package readxl package can be used. In the package, the function read_excel() can be used which requires the location of the file and to import a specific sheet, the argument sheet= \"name of the sheet\" can be used.\n\nlibrary(readxl)\n#Will import the sheet \"Ovwerview\" from the Excel-file \"Statistics_Kumla_20200408\" and save it in the object \"Data_Kumla\"\nData_Kumla &lt;- read_excel(\"~/Courses/R_Course/Statistics_Kumla_20200408.xlsx\", sheet = \"Overview\")\n\nThe imported data will be a data frame."
  },
  {
    "objectID": "Data_vis.html#basic-plotting",
    "href": "Data_vis.html#basic-plotting",
    "title": "2  Data Visualisation",
    "section": "2.2 Basic Plotting",
    "text": "2.2 Basic Plotting\nPlots can be made by using the Base R functions.\n\n#Scatter plot of the data in column \"PFOS\" and \"sum_PFOS\"\nplot(x=Data_Kumla$PFOS, y=Data_Kumla$sum_PFOS,\n     xlab = \"PFOS concentration [ng/L]\", #adds x-axis title\n     ylab = \"sum_PFOS [ng/L]\", #adds y-axis title\n     pch = 16, #solid circlesch, pch=1 unfilled cicles\n     cex.lab=0.75, #changes font size of axis titels, 1 is default size\n     cex.axis=0.75, #changes font size of axis values\n     cex = 0.6, #changes point size\n     col=\"darkred\") \n\ngrid(lty=1, col=\"lightgrey\", lwd=1) #adds a grid\n\nlines(lowess(Data_Kumla$PFOS, Data_Kumla$sum_PFOS),\n      col=\"black\", lwd=2, lty=2) #adds a local regression line as a black colour dashed (lty=2) line with line width 2\n\nabline(lm(Data_Kumla$PFOS ~ Data_Kumla$sum_PFOS, data=Data_Kumla), col=\"darkgrey\", lwd=2, lty=3) #adds regression line in darkgrey colour\n\nlegend(x=\"topleft\", legend=c(\"Scatter plot\", \"LOWESS\", \"Linear regression\"), fill=c(\"darkred\",\"black\",\"darkgrey\"),\n       cex=0.5)\n\n\n\n\nOther plot types:\n\nData_Kumla$`Sampling site`&lt;- factor(Data_Kumla$`Sampling site`)\n\nbar &lt;- barplot(height=Data_Kumla$PFOS,\n        ylab=\"Sampling site\",\n        xlab=\"PFOS concentraion [ng/L]\",\n        col= c(\"darkred\",\"darkgreen\",\"darkblue\"),\n        cex.axis = 0.75,\n        cex.names = 0.75,\n        legend.text=c(\"K1\", \"KS\", \"KRef\"),\n        args.legend=list(x=\"bottomright\", cex=0.5),\n        horiz = TRUE,\n        xlim = c(0, max(Data_Kumla$PFOS)+75))\ntext(bar, max(Data_Kumla$PFOS)+0.5, labels=(max(Data_Kumla$PFOS)))\nbox() #adds box around the plot"
  }
]