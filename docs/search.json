[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R4EnvChemAnalysis - PhD Course",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nIt was made for the PhD course “R programming for environmental analytical chemistry”, 6 hp, at Linköping University during spring 2024.\nThe aim with the course was to learn basic R programming, learn to write functions for the purpose of analysing enviornmental chemical data, visualise the data, and basic datamanagement creation.\nThis Quarto book has served the purpose of documenting the development during the course."
  },
  {
    "objectID": "Basics.html#simple-commands",
    "href": "Basics.html#simple-commands",
    "title": "1  Basics",
    "section": "1.1 Simple commands",
    "text": "1.1 Simple commands\nObjects is a way to store data in R. Objects can easily be created by using the symbol &lt;-, and that points towards the name of the object. Further, to write comments that can make the written code easier to interpretate # can be used:\n\n#This is a code that creates objects a which contains the sum of 2 + 5\n\na &lt;- 2 + 5\na\n\n[1] 7\n\n#It is also possible to assign a vector of numbers to objects as done here for b which contains the numbers 2,3,4,5,6\n\nb &lt;- c(2:6)\nb\n\n[1] 2 3 4 5 6\n\n#Further, it is possible to use addition, subtraction, etc, on objects.\n\nc &lt;- b+a\nc\n\n[1]  9 10 11 12 13\n\nd &lt;- b*a\nd\n\n[1] 14 21 28 35 42\n\nd &lt;- d - 2\nd\n\n[1] 12 19 26 33 40\n\n#Also, it is possible to use matrix operator on vectors\n\ne1 &lt;- b %*% b #inner multiplication\ne1\n\n     [,1]\n[1,]   90\n\ne2 &lt;- b %o% b #outer multiplication\ne2\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    4    6    8   10   12\n[2,]    6    9   12   15   18\n[3,]    8   12   16   20   24\n[4,]   10   15   20   25   30\n[5,]   12   18   24   30   36\n\n\nImportant: object names cannot start with a number or contain symbols such as ^, !, $, @, +, -, /, *\n\n#2a &lt;- c(2,4)\n\n#Error: unexpected symbol in \"2a\"\n\n\n#object! &lt;- c(1:4)\n\n#Error: unexpected '!' in \"object!\"\n\n\n#However, it is possible to use \"_\" in an objects name\n\nobject_name &lt;- c(5:8)\n\nIf an new objects is given the same name as an existing objects, the content in the objects will be written over by the new content:\n\nf &lt;- 2+6 #objects f is created which contains the sum of 2+6\nf\n\n[1] 8\n\nf &lt;- c(2,4,6) #object f now has the values 2, 4, and 6\nf\n\n[1] 2 4 6\n\n\nTo avoid writing over existing objects, one can either look in the top-right part of RStudio in the “Environment”-tab to see which names are already in use, or can use the command ls()\n\nls()\n\n [1] \"a\"               \"b\"               \"c\"               \"d\"              \n [5] \"e1\"              \"e2\"              \"f\"               \"has_annotations\"\n [9] \"object_name\"     \"x\"              \n\n\n\nWhen a script is running and you would like to cancel it, you can press clrl+c\n\nMore useful functions:\n\nsum(b) #sums a set of values\n\n[1] 20\n\nmean(b) #returns the mean values of a set of values \n\n[1] 4\n\nreplicate(n = 3, a+2) #repeats the command (here a+2) n number of times\n\n[1] 9 9 9\n\ntrunc(3.14) #returns only integers of a number\n\n[1] 3\n\nsample(x = object_name, size = 2, replace = TRUE) #returns random value from x (in this case object_name). size determines number of values to return and replace = TRUE mean the same value can be returned multiple times (if FALSE, will not return same value multiple times)\n\n[1] 6 7\n\na1 &lt;- data.frame(a11=1:10,\n                 a12=2:11)\napply(a1[,1:2], 2, mean) #performs specified function (in this case mean) of column 1 and 2 in a1\n\na11 a12 \n5.5 6.5 \n\napply(a1[,1:2], 1, mean) #performed specified function on each row for the columns 1 and 2 in a1\n\n [1]  1.5  2.5  3.5  4.5  5.5  6.5  7.5  8.5  9.5 10.5\n\nsd(b, na.rm=TRUE) #calculate the standard deviation of vector b and ignoers NA values\n\n[1] 1.581139"
  },
  {
    "objectID": "Basics.html#data-types",
    "href": "Basics.html#data-types",
    "title": "1  Basics",
    "section": "1.2 Data types",
    "text": "1.2 Data types\nThe main data types in R includes\n\nNumeric ⟹ 3.14, 2, 6.022\nInteger ⟹ 2, 3, 4\nComplex ⟹ 4i+5\nLogical ⟹ TRUE/FALSE\nCharacter ⟹ “x”, “hello”, “RT”\n\nTo check if a vector is numeric: is.numeric(\"data\") , returns TRUE if data is numeric (incldues both integers or decimals)\nclass(\"data\") returns the type of data e.g. numeric\ntypeof(\"data\") are more specific, e.g. returns double if data contains decimal numbers\nIf want to change vector to integers can sue as.integer(\"data\")\n\nFactor ⟹ categorical variable, can be used to divide data according to different levels e.g. data has the categories influent and effluent\n\n\ndata &lt;- data.frame(sample_type = as.factor(c(\"influent\", \"effluent\")), #as.factor can be used to convert the type of sample into factor\n                   RT_min = c(1.1,1.1,2.3,2.3,3.4,3.4),\n                   m_z = c(180, 190, 200, 180, 230, 200))\n\nstr(data) #can be used to see structure of data frame\n\n'data.frame':   6 obs. of  3 variables:\n $ sample_type: Factor w/ 2 levels \"effluent\",\"influent\": 2 1 2 1 2 1\n $ RT_min     : num  1.1 1.1 2.3 2.3 3.4 3.4\n $ m_z        : num  180 190 200 180 230 200\n\n\nData frame can be used to store data in a table, similar to Excel. Can have different columns with data (in example above, have columns sample_type , RT_min , and m_z ) and the columns contains data in six rows. The columns can contain different types of data, e.g. character , numeric , logical, but they must have the same length.\nCan extract a certain part of a data frame by using []\n\n#data[row, column]\n\ndata[2] #second columns (RT_min) with all row data\n\n  RT_min\n1    1.1\n2    1.1\n3    2.3\n4    2.3\n5    3.4\n6    3.4\n\ndata[2,] #second row, with all column data\n\n  sample_type RT_min m_z\n2    effluent    1.1 190\n\ndata[,2:3] #column 2 and 3 (RT_min, m_z), all rows\n\n  RT_min m_z\n1    1.1 180\n2    1.1 190\n3    2.3 200\n4    2.3 180\n5    3.4 230\n6    3.4 200\n\ndata[4:6, 2:3] #row 4 to 6, for column 2 and 3\n\n  RT_min m_z\n4    2.3 180\n5    3.4 230\n6    3.4 200\n\ndata[1, c(\"RT_min\")] #returns first value for column named \"RT_min\"\n\n[1] 1.1\n\ndata$RT_min #returns all values from column named \"RT_min\"\n\n[1] 1.1 1.1 2.3 2.3 3.4 3.4\n\ndata$RT_min[1] &lt;- 1.2 #changes first value of column \"RT_min\" to 1.2\ndata$new &lt;- c(1:6) #adds new column \"new\" to the data with the values 1 to 6\n\nTo store data with different lengths, can use lists instead.\n\ndata_list &lt;- list(sample_type = c(\"influent\", \"effluent\"),\n                  retention_time = c(1.1, 2.1, 2.4, 3.0, 4.6, 4.8, 5.3),\n                  m_z = c(180, 190, 200, 210))\n\nstr(data_list)\n\nList of 3\n $ sample_type   : chr [1:2] \"influent\" \"effluent\"\n $ retention_time: num [1:7] 1.1 2.1 2.4 3 4.6 4.8 5.3\n $ m_z           : num [1:4] 180 190 200 210\n\n\n\ndata_list[[1]] #will return first list\n\n[1] \"influent\" \"effluent\"\n\ndata_list[[2]][1:4] #returns first 4 values of list 2\n\n[1] 1.1 2.1 2.4 3.0\n\ndata_list[[3]][3] #returns third value from list 3\n\n[1] 200\n\n\nIf have two objects can compare them with logical tests:\n\nh &lt;- c(1,2,3)\ni &lt;- c(2,2,4)\n\n#elementwise comparison\nh != i #is h not equal to i, so givs TRUE, FALSE, TRUE\n\n[1]  TRUE FALSE  TRUE\n\nh == i #is h equal to i, gives FALSE, TRUE, FALSE\n\n[1] FALSE  TRUE FALSE\n\nj &lt;- 4\n\nj %in% h #is j in h, 4 is not in h\n\n[1] FALSE\n\nj %in% i #is j in i, 4 is in i\n\n[1] TRUE\n\n\n\ndata$new[data$sample_type==\"influent\"] &lt;- \"is influent\" #will write \"is influent\" on the rows in column \"new\" is sample_types equals \"influent\n\nTo check if data has NA\n\ndata$new[data$new==\"is influent\"] &lt;- NA #put \"is influent\" to NA\n\nis.na(data) #returns TRUE if is has NA\n\n     sample_type RT_min   m_z   new\n[1,]       FALSE  FALSE FALSE  TRUE\n[2,]       FALSE  FALSE FALSE FALSE\n[3,]       FALSE  FALSE FALSE  TRUE\n[4,]       FALSE  FALSE FALSE FALSE\n[5,]       FALSE  FALSE FALSE  TRUE\n[6,]       FALSE  FALSE FALSE FALSE"
  },
  {
    "objectID": "Basics.html#writing-functions",
    "href": "Basics.html#writing-functions",
    "title": "1  Basics",
    "section": "1.3 Writing Functions",
    "text": "1.3 Writing Functions\nInstead of using the included functions in R (e.g. plot() ) or in a package (e.g. ggplot() ), it is possible to write your own functions.\nTo make a function, three parts is needed: name, set of arguments, and body of code and has en general layout as: function_name &lt;- function(\"set of arguments\"){\"functions code}\n\n#Function that sums the values in objects \"vector\" without any set of arguments used\nvector &lt;- 1:10\nfirst_function &lt;- function(){\n  output &lt;- sum(vector)\n  return(output)\n}\nfirst_function()\n\n[1] 55\n\n#This function does the same, but here an argument \"samp\" is needed for it to work\nsecond_function &lt;- function(samp){\n  sum_sample &lt;- sum(samp)\n  return(sum_sample)\n}\nsecond_function(samp=vector)\n\n[1] 55\n\n#Same type of function again, but here we have an default value for argument \"samp\", so if the argument is not specifically used, the default it used.\nthird_function &lt;- function(samp=1:4){\n  sum_sample &lt;- sum(samp)\n  return(sum_sample)\n}\nthird_function()\n\n[1] 10\n\nthird_function(samp=vector)\n\n[1] 55\n\n\nIf one has a written some command and want to make it into a function, R can do that for you if you highlight the commands and press Alt + cltr + x (or code &gt; extract function)."
  },
  {
    "objectID": "Basics.html#if-statements-for-loops",
    "href": "Basics.html#if-statements-for-loops",
    "title": "1  Basics",
    "section": "1.4 If Statements/ For Loops",
    "text": "1.4 If Statements/ For Loops\nAn useful way to write code is to use If statements and For loops.\n\nIn If statements, only if a certain criteria is true, a certain command will happen. In R they have the general form of: if(\"criteria\"){\"command to happen if true\"}.\n\n\n#Only if v1 is smaller than v2 will v3 be created as the sum of v1 and v2\nv1 &lt;- 5\nv2 &lt;- 10\nif (v1&lt;v2) {\n  v3 &lt;- v1+v2\n  print(v3)\n}\n\n[1] 15\n\nif (v1&gt;v2) {\n  v4 &lt;- v1+v2\n  print(v4)\n}\n#Returns nothing since statement is not true\n\nIt is also possible to add a “plan B” with if statements by using else{} .\n\n#will return the sum w1 and w2 if the if statment is true, otherwise will take w1-w2\nw1 &lt;- 5\nw2 &lt;- 10\nif (w1&gt;w2) {\n  w3 &lt;- w1+w2\n  print(w3)\n} else {\n  w3 &lt;- w1-w2\n  print(w3)\n}\n\n[1] -5\n\n\n\n#Can combine if statments with function. In this case, if input value of x is larger than 0, will return y as y+x*-1\nx1 &lt;- 2\ny1 &lt;- 3\na_function &lt;- function(x,y){\n  if (x &gt; 0){\n    y &lt;- y+x*-1\n  }\n  return(y)\n}\na_function(x=x1, y=y1)\n\n[1] 1\n\n\n\nIn For loops, certain commands will be repeated for a certain number of times. In R they have the general form of: for(\"item in object\"){\"command as long as item is in object\"}.\n\n\n#The For loop will add the numbers in o1 +1 to the empty vector o2\no1 &lt;- 1:4\no2 &lt;- c()\nfor (i in o1) {\n  o2[i] &lt;- i+1\n}\no2\n\n[1] 2 3 4 5"
  },
  {
    "objectID": "Data_vis.html#import-export-data",
    "href": "Data_vis.html#import-export-data",
    "title": "2  Data Visualisation",
    "section": "2.1 Import/ Export data",
    "text": "2.1 Import/ Export data\nData can be imported in R in different ways. In the Environment tab, there is an import-data button, in which it is possible to select the type of data (e.g. Excel). From that tab it is possible to receive the command needed if one wants to have it in a script.\nTo import .csv data, the read.csv() (or read_csv()) function can be used:\ncsv_data &lt;- read.csv(\"csv file location\")\nIt is also possible to easily export data to a csv-file by using the function write.csv() :\nwrite.csv(\"name of data\", \"name of the file to export to (and location if other than working directory)\", row.names = FALSE) row.names = FALSE to remove the row names to be written in the output.\nFor importing data from an Excel-file, the package readxl package can be used. In the package, the function read_excel() can be used which requires the location of the file and to import a specific sheet, the argument sheet= \"name of the sheet\" can be used.\n\nlibrary(readxl)\n#Will import the sheet \"Ovwerview\" from the Excel-file \"Statistics_Kumla_20200408\" and save it in the object \"Data_Kumla\"\nData_Kumla &lt;- read_excel(\"~/Courses/R_Course/Statistics_Kumla_20200408.xlsx\", sheet = \"Overview\")\n\nThe imported data will be a data frame."
  },
  {
    "objectID": "Data_vis.html#basic-plotting",
    "href": "Data_vis.html#basic-plotting",
    "title": "2  Data Visualisation",
    "section": "2.2 Basic Plotting",
    "text": "2.2 Basic Plotting\nPlots can be made by using the Base R functions.\n\n#Scatter plot of the data in column \"PFOS\" and \"sum_PFOS\"\nplot(x=Data_Kumla$PFOS, y=Data_Kumla$sum_PFOS,\n     xlab = \"PFOS concentration [ng/L]\", #adds x-axis title\n     ylab = \"sum_PFOS [ng/L]\", #adds y-axis title\n     pch = 16, #solid circles, pch=1 unfilled cicles\n     cex.lab=0.75, #changes font size of axis titels, 1 is default size\n     cex.axis=0.75, #changes font size of axis values\n     cex = 0.6, #changes point size\n     col=\"darkred\") \n\ngrid(lty=1, col=\"lightgrey\", lwd=1) #adds a grid\n\nlines(lowess(Data_Kumla$PFOS, Data_Kumla$sum_PFOS),\n      col=\"black\", lwd=2, lty=2) #adds a local regression line as a black colour dashed (lty=2) line with line width 2\n\nabline(lm(Data_Kumla$sum_PFOS ~ Data_Kumla$PFOS, data=Data_Kumla), col=\"darkgrey\", lwd=2, lty=3) #adds regression line in darkgrey colour\n\nlegend(x=\"topleft\", legend=c(\"Scatter plot\", \"LOWESS\", \"Linear regression\"), fill=c(\"darkred\",\"black\",\"darkgrey\"),\n       cex=0.5)\n\n\n\n\nOther plot types:\n\nData_Kumla$`Sampling site`&lt;- factor(Data_Kumla$`Sampling site`)\n\nbarplot(height=Data_Kumla$PFOS,\n        ylab=\"Sampling site\",\n        xlab=\"PFOS concentraion [ng/L]\",\n        col= c(\"darkred\",\"darkgreen\",\"darkblue\"),\n        cex.axis = 0.75,\n        cex.names = 0.75,\n        legend.text=c(\"K1\", \"KS\", \"KRef\"),\n        args.legend=list(x=\"bottomright\", cex=0.5),\n        horiz = TRUE,\n        xlim = c(0, max(Data_Kumla$PFOS)+75))\n\nbox() #adds box around the plot"
  },
  {
    "objectID": "Data_vis.html#tidyverse",
    "href": "Data_vis.html#tidyverse",
    "title": "2  Data Visualisation",
    "section": "2.3 Tidyverse",
    "text": "2.3 Tidyverse\nTidyverse contains a collection of packages. All the functions from the packages follow the same type of structure, making them easier to use. The core packages included in Tidyverse are ggplot2, dplyr, tidyr, readr, purr, tibble, stringr, and forcats.\n\n\n\n\n\n\n\nreadr\nfor reading rectangular data from e.g. .csv by using read_csv()\n\n\ntidyr\nfor organising tabular data e.g. pivot_longer() to combine multiple columns to a long table\n\n\npurr\ncan be used to exchange For Loops with code e.g. by using map() to apply a function to all elements in a list and returns a list\n\n\ndplyr\ncan be used for data manipulations e.g. by piping\n\n\n\nTidy data: Each variable is a column, each column is a variable. Each observation is a row, each row is an observation. Each value is a cell, each cell is a single value.\n\n2.3.1 Pipes\nIs a way to simplify R code. By using %&gt;% (or |&gt;, shortcut: ctrl+shift+m) code can be rewritten to become easier interpretated. The symbol can be thought of as a “+” symbol.\nFor example, if you would like to only have the concentrations of PFOS in Data_Kumla above 100 ng/L. Instead of having to use For loops and/or if statements or other type of commands, it can simply be written using pipe operations:\n\nlibrary(tidyverse)\nPFOS_above100 &lt;- Data_Kumla |&gt; select(PFOS)|&gt; filter(PFOS&gt;100)\n#or use %&gt;% instead of |&gt;, first requires paranthesis when calling functions, second does not\nPFOS_above100\n\n# A tibble: 65 × 1\n    PFOS\n   &lt;dbl&gt;\n 1  229.\n 2  140.\n 3 1045.\n 4  442.\n 5  540.\n 6  223.\n 7  976.\n 8  559.\n 9  830.\n10  162.\n# ℹ 55 more rows\n\n\nOr in situation when nested function i used. E.g. want to the mean of the PFOS concentrations and round it to 1 decimal.\n\nmean_PFOS &lt;- round(mean(Data_Kumla$PFOS),1)\nmean_PFOS\n\n[1] 321.5\n\n\nHowever, by using pipe operation it becomes more readable:\n\nmean_PFOS_pipe &lt;- Data_Kumla$PFOS %&gt;% mean %&gt;% round(1)\nmean_PFOS_pipe\n\n[1] 321.5\n\n\n\n\n2.3.2 ggplot2\nggplot2 can be used to make plots in R instead of using the base R functions.\n\nrequire(ggpubr) #reqiured to add regression equation\n\nLoading required package: ggpubr\n\nmean_data &lt;- data.frame(a=mean(Data_Kumla$PFOS), b=mean(Data_Kumla$sum_PFOS))\np &lt;- ggplot(data=Data_Kumla, mapping=aes(x=PFOS, y=sum_PFOS))+\n  geom_point(size=0.6, aes(colour=\"Scatter plot\"))+\n  geom_smooth(method=\"loess\", size=0.6, aes(colour=\"LOWESS\"), se=FALSE,linetype=\"longdash\")+\n  geom_smooth(method=\"lm\", size=0.6, aes(colour=\"Linear regression\"), se=FALSE, linetype=\"dashed\")+\n  stat_regline_equation(label.x=1300, label.y=580, colour=\"darkgrey\", size=3)+ #adds regression equation\n  stat_cor(aes(label=..rr.label..), label.x=1300, label.y=420, size=3, colour=\"darkgrey\", r.digits = 4)+ #adds R^2\n  scale_color_manual(values = c(\"Scatter plot\" = \"darkred\", \"LOWESS\" = \"black\", \"Linear regression\" = \"darkgrey\")) + #colours of points\n  \n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    aspect.ratio = 1,  # Set aspect ratio\n    plot.margin = margin(0.5, 0.5, 0.4, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=9),\n    legend.position = c(0.25, 0.85),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(), #removes the title of the legend\n    legend.margin = margin(0.001, 1, 0.5, 0.5))+\n  geom_point(data=mean_data, aes(x=a,y=b), colour=\"black\",size=3, alpha=0.9, shape=21, fill=\"salmon\") #highlights the mean point in red\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n\np+ geom_text(aes(mean(PFOS)+350, mean(sum_PFOS)+10,label=paste(\"Mean point\")), size=3, colour=\"red4\") #adds a text for the mean point\n\nWarning: The dot-dot notation (`..rr.label..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(rr.label)` instead.\n\n\nWarning in geom_text(aes(mean(PFOS) + 350, mean(sum_PFOS) + 10, label = paste(\"Mean point\")), : All aesthetics have length 1, but the data has 108 rows.\nℹ Did you mean to use `annotate()`?\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n#p+ geom_point(data=Data_Kumla, aes(x=PFOSA, y=sum_PFOS), colour=\"pink\")\n\n\nggscatter(data=Data_Kumla,x=\"PFOS\", y=\"sum_PFOS\", add=\"reg.line\")+\n  stat_cor(label.x=1300, label.y=750)+\n  stat_regline_equation(label.x=1300, label.y=480)\n\n\n\n\n\nsampling &lt;- as.factor(Data_Kumla$`Sampling site`)\nb &lt;- ggplot(data=Data_Kumla, aes(x=sampling, y=PFOS, fill=sampling))+\n  geom_bar(stat = \"identity\", width = 0.5, colour=\"black\",position=position_dodge())+\n  scale_fill_manual(values = c(\"K1\" = \"darkblue\", \"KS\" = \"darkgreen\", \"KRef\" = \"darkred\"))+\n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid.major = element_blank(),  # Remove grid lines\n    panel.grid.minor = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    #aspect.ratio = 1,  # Set aspect ratio\n    plot.margin = margin(0.5, 0.5, 0.4, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=9),\n    #legend.position = c(0.85, 0.85),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(),\n    #legend.margin = margin(0.001, 1, 0.5, 0.5)\n)\n\nb\n\n\n\n\n\nb2 &lt;- ggplot(data=Data_Kumla, aes(x=PFOS,fill=sampling))+\n  geom_bar(stat = \"bin\", binwidth = 108, colour=\"black\",position=position_dodge())+\n  scale_fill_manual(values = c(\"K1\" = \"darkblue\", \"KS\" = \"darkgreen\", \"KRef\" = \"darkred\"))+\n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid.major = element_blank(),  # Remove grid lines\n    panel.grid.minor = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    #aspect.ratio = 1,  # Set aspect ratio\n    plot.margin = margin(0.5, 0.5, 0.4, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=9),\n    #legend.position = c(0.85, 0.85),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(),\n    #legend.margin = margin(0.001, 1, 0.5, 0.5)\n)\n\nb2\n\n\n\n\n\n\n#http://www.sthda.com/english/wiki/ggplot2-barplots-quick-start-guide-r-software-and-data-visualization \n\n#+++++++++++++++++++++++++\n# Function to calculate the mean and the standard deviation\n  # for each group\n#+++++++++++++++++++++++++\n# data : a data frame\n# varname : the name of a column containing the variable\n  #to be summariezed\n# groupnames : vector of column names to be used as\n  # grouping variables\n\ndata_summary &lt;- function(data, varname, groupnames){\n  require(plyr)\n  summary_func &lt;- function(x, col){\n    c(mean = mean(x[[col]], na.rm=TRUE),\n      sd = sd(x[[col]], na.rm=TRUE))\n  }\n  data_sum&lt;-ddply(data, groupnames, .fun=summary_func,\n                  varname)\n  data_sum &lt;- rename(data_sum, c(\"mean\" = varname))\n return(data_sum)\n}\n\n\n#another way to calculate mean and sd, notice data_pfas created below with pivot_longer(). Could use Data_Kumla and summarize on selected columns instead.\ndata_pfas |&gt; group_by(Type_of_PFAS) |&gt; summarize(Conc_mean = mean(Conc_of_PFAS), Cond_SD = sd(Conc_of_PFAS)) \n\n\ndata_pfas &lt;- Data_Kumla |&gt; pivot_longer(cols = 13:31,\n                            names_to = \"Type_of_PFAS\",\n                            values_to = \"Conc_of_PFAS\") |&gt;\n                        select(c(`Sampling site`, Type_of_PFAS, Conc_of_PFAS))\n\ndata_pfas_sd &lt;- data_pfas |&gt; data_summary(varname=\"Conc_of_PFAS\", groupnames=\"Type_of_PFAS\") |&gt; filter(Conc_of_PFAS &lt;100) #exclude PFAS above 100 in mean concentration\n\nLoading required package: plyr\n\n\n------------------------------------------------------------------------------\n\n\nYou have loaded plyr after dplyr - this is likely to cause problems.\nIf you need functions from both plyr and dplyr, please load plyr first, then dplyr:\nlibrary(plyr); library(dplyr)\n\n\n------------------------------------------------------------------------------\n\n\n\nAttaching package: 'plyr'\n\n\nThe following object is masked from 'package:ggpubr':\n\n    mutate\n\n\nThe following objects are masked from 'package:dplyr':\n\n    arrange, count, desc, failwith, id, mutate, rename, summarise,\n    summarize\n\n\nThe following object is masked from 'package:purrr':\n\n    compact\n\nggplot(data=data_pfas_sd, aes(y=Conc_of_PFAS, x=Type_of_PFAS, fill=Type_of_PFAS))+\n  geom_bar(stat = \"identity\",position=position_dodge())+\n  geom_errorbar(aes(ymin=Conc_of_PFAS-sd, ymax=Conc_of_PFAS+sd), width=0.2, position=position_dodge(0.9))+ #add errorbars\n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid.major = element_blank(),  # Remove grid lines\n    panel.grid.minor = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9, angle=45, hjust=1),  # Make x-axis text bold and in an angle\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    #aspect.ratio = 1,  # Set aspect ratio\n    plot.margin = margin(0.5, 0.5, 1, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=7),\n    #legend.position = c(0.85, 0.85),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(),\n    #legend.margin = margin(0.001, 1, 0.5, 0.5)'\n)\n\n\n\n\n\n#excludes PFOS that has higher concentrations\ndata_pfas |&gt; filter(Type_of_PFAS != c(\"PFOS\")) |&gt;\nggplot(mapping=aes(x=Type_of_PFAS, y=Conc_of_PFAS, fill=Type_of_PFAS))+\n  geom_boxplot(outlier.color = \"darkred\", outlier.shape=16, outlier.size = .6, notch=FALSE)+ #log of conc. values\n  geom_line(data=data_pfas_sd, aes(x = Type_of_PFAS, y = Conc_of_PFAS), size = 1, color=\"red\", group = 1)+ #log of mean values\n  \n  stat_boxplot(geom = \"errorbar\",\n                   width = 0.25)+\n  stat_summary(fun.y=mean, geom=\"point\", shape=20, size=4, color=\"red\", fill=\"red\", alpha=0.7) +\n  \n  scale_y_log10()+\n  \n  labs(x = \"Type of PFAS\", y = \"log(Concentration of PFAS)\", color= \"\") +\n\n  \n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid.major = element_blank(),  # Remove grid lines\n    panel.grid.minor = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9, angle=45, hjust=1),  # Make x-axis text bold and in an angle\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    #aspect.ratio = 1,  # Set aspect ratio\n    plot.margin = margin(0.5, 0.5, 1, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=7),\n    #legend.position = c(0.85, 0.85),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(),\n    #legend.margin = margin(0.001, 1, 0.5, 0.5)'\n)\n\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nℹ Please use the `fun` argument instead.\n\n\n\n\n\n\nsampling_pfos &lt;- Data_Kumla |&gt; select(c(`Sampling site`, PFOS))\n\nggplot(data=sampling_pfos, aes(x=`Sampling site`,y=PFOS, fill=`Sampling site`))+\n  geom_boxplot(outlier.color = \"red\", outlier.shape=16, outlier.size = .8, notch=TRUE, aes(y=log(PFOS)))+\n  \n  scale_fill_manual(values=c(\"darkred\", \"darkgreen\", \"darkblue\"))+\n  labs(x = \"Sampling site\", y = \"log(Concentration of PFOS)\", color= \"\") +\n  \n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid.major = element_blank(),  # Remove grid lines\n    panel.grid.minor = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9, angle=45, hjust=1),  # Make x-axis text bold and in an angle\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    #aspect.ratio = 1,  # Set aspect ratio\n    plot.margin = margin(0.5, 0.5, 1, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=7),\n    #legend.position = c(0.85, 0.85),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(),\n    #legend.margin = margin(0.001, 1, 0.5, 0.5)'\n)\n\n\n\n\n\nggplot(data=Data_Kumla)+\n  geom_point(size=0.6, aes(colour=\"Scatter plot\", x=PFOS,y=log(sum_PFOS)))+\n  geom_smooth(method=\"loess\", size=0.8, aes(colour=\"LOWESS\",x=PFOS,y=log(sum_PFOS)), se=TRUE,linetype=\"longdash\")+\n  scale_color_manual(values = c(\"Scatter plot\" = \"darkred\", \"LOWESS\" = \"black\")) + #colours of points\n  \n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    aspect.ratio = 1,  # Set aspect ratio\n    plot.margin = margin(0.5, 0.5, 0.4, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=9),\n    #legend.position = c(0.25, 0.85),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(), #removes the title of the legend\n    legend.margin = margin(0.001, 1, 0.5, 0.5))\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "qc_hdmse_peak.html#qc-mixture",
    "href": "qc_hdmse_peak.html#qc-mixture",
    "title": "3  Data Analysis",
    "section": "3.1 QC mixture",
    "text": "3.1 QC mixture\nThe following part is for analysis of a QC mixture containing 9 analytes.\n\n#Data is importer for the two data set (mzmine and ms_dial). A reference data frame is constructed (unifi) as well as data frame with theoretical values (qc_compounds).\n\nmzmine &lt;- read_excel(\"~/Project/hrms_converter-2024/qc5rep_hdmse_peakpicking_featurelist_MZMINE.xlsx\", \n    col_types = c(\"text\", \"text\", \"numeric\", \n        \"numeric\", \"text\", \"text\", \"numeric\", \n        \"numeric\", \"text\", \"numeric\", \"numeric\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"text\", \"numeric\", \"text\", \n        \"text\", \"text\", \"text\", \"text\", \"numeric\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"text\", \"text\", \"numeric\", \n        \"numeric\", \"numeric\", \"text\", \"text\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"numeric\", \"numeric\", \"numeric\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"text\", \"text\", \"numeric\", \n        \"numeric\", \"numeric\", \"text\", \"text\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"numeric\", \"numeric\", \"numeric\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"text\", \"text\", \"text\", \"text\", \n        \"text\", \"text\", \"text\", \"numeric\", \n        \"numeric\", \"numeric\"))\n\nms_dial &lt;- read_excel(\"~/Project/hrms_converter-2024/qc3rep_hdmse_peakpicking_featurelist_MSDIAL.xlsx\")\n\nunifi &lt;- data.frame(compound=c(\"acetaminophen\",\"caffeine\",\"leucine enkephaline\",\"reserpine\",\"sulfadimethoxine\",\"sulfaguanidine\",\"terfenadine\",\"val-tyr-val\",\"verapamil\")\n  , mz_unifi=c(152.0697, 195.0870, 556.2756, 609.2787, 311.0801, 215.0589, 472.3197, 380.2173, 455.2892),\n  rt_unifi=c(0.56,1.30,2.37,3.37,2.96,0.31,3.66,1.28,3.26),\n  dt_unifi=c(2.26,2.60,6.41,7.23,4.00,3.01,6.48,5.05,5.66))\n\nqc_compounds &lt;- data.frame(\n  compound=c(\"acetaminophen\",\"caffeine\",\"leucine enkephaline\",\"reserpine\",\"sulfadimethoxine\",\"sulfaguanidine\",\"terfenadine\",\"val-tyr-val\",\"verapamil\")\n  , mz=c(152.0705, 195.0876, 556.2765, 609.2806, 311.0808, 215.0597, 472.3209, 380.2179, 455.2904))\n\n\n#Creating new objects with only the a subset of the data for both data sets. RT and Mobility is rounded to two digits to be compariable to unifi data\n\n#Only keep the rows that corresponds to the compounds in qc_compounds for mzmine data set\nmzmine_subset &lt;- mzmine |&gt; \n  select(id,height,ion_mobility,rt,mz) |&gt;  #to only include those columns in the new data frame\n  mutate(across(c(rt,ion_mobility),round, 2)) |&gt; #round the rt and ion mobility columns values to two decimals\n  mutate(across(mz,round, 4)) |&gt; #round the mz values to four decimals\n  filter(id %in% qc_compounds$compound ) #only keeps the rows in id that is labeled as one of the compounds in qc_compounds data frame\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(c(rt, ion_mobility), round, 2)`.\nCaused by warning:\n! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\nSupply arguments directly to `.fns` through an anonymous function instead.\n\n  # Previously\n  across(a:b, mean, na.rm = TRUE)\n\n  # Now\n  across(a:b, \\(x) mean(x, na.rm = TRUE))\n\n#msdial data is filtered to excluded the rows where mobility is -1.00 since those are duplicates\n#Also only keep rows that corresponds to the qc compounds\nmsdial_subset &lt;- ms_dial |&gt; \n  select(`Alignment ID`,Average,`Average Rt(min)`,`Average mobility`,`Average Mz`) |&gt; \n  mutate(across(c(`Average Rt(min)`,`Average mobility`),round, 2)) |&gt; \n  mutate(across(`Average Mz`,round, 4)) |&gt;\n  filter(`Average mobility` != -1.00 & `Alignment ID` %in% qc_compounds$compound )\n\n\n\nALTERNATIVE METHOD FOR THE ABOVE WRITTEN CODE\nThe methods used above realize on that the “correct” compounds names have manually been added before to the data before importing it in RStudio. However, to skip having to manually add them, the following part is for finding the correct compounds in mzmine or msdial that corresponds to the ones in UNIFI/ QC_compounds data frame.\nThe criteria for a match is based on the retention time (RT), drift time (DT), and Mass-To-Charge ration(m/z) compared to the values in UNIFI.\n\nFor doing this the join -functions can be used.\n\n\n\n\nR for Data Science (2e) - 19  Joins (hadley.nz)\n\n\n“Mutating joins, which add new variables to one data frame from matching observations in another.” e.g. left_join() and inner_join()\n\n\n“Filtering joins, which filter observations from one data frame based on whether or not they match an observation in another.” e.g. semi_join() and anti_join()\n\n\n\n\n#First import the data (if the first code chunk have not been run for importing data\nmzmine &lt;- read_csv(\"~/Project/hrms_converter-2024/qc5rep_hdmse_peakpicking_featurelist_MZMINE.csv\",show_col_types = FALSE)\n#glimpse(mzmine) \nmsdial &lt;- ms_dial &lt;- read_excel(\"~/Project/hrms_converter-2024/qc3rep_hdmse_peakpicking_featurelist_MSDIAL.xlsx\") \n\nmzmine |&gt; filter(is.na(rt) | is.na(mz) | is.na(ion_mobility)) #check that there are no missing values. Need to have entries for each obesrvation\n\n# A tibble: 0 × 130\n# ℹ 130 variables: id &lt;dbl&gt;, area &lt;dbl&gt;, ion_mobility &lt;dbl&gt;, rt &lt;dbl&gt;,\n#   mz_range:min &lt;dbl&gt;, mz_range:max &lt;dbl&gt;, charge &lt;dbl&gt;, fragment_scans &lt;dbl&gt;,\n#   alignment_scores:rate &lt;dbl&gt;, alignment_scores:aligned_features_n &lt;dbl&gt;,\n#   alignment_scores:align_extra_features &lt;dbl&gt;,\n#   alignment_scores:weighted_distance_score &lt;dbl&gt;,\n#   alignment_scores:mz_diff_ppm &lt;dbl&gt;, alignment_scores:mz_diff &lt;dbl&gt;,\n#   alignment_scores:rt_absolute_error &lt;dbl&gt;, …\n\nmzmine |&gt; count(rt, mz, ion_mobility) |&gt; filter(n&gt;1) #check that the variables uniquely identifies each feature\n\n# A tibble: 0 × 4\n# ℹ 4 variables: rt &lt;dbl&gt;, mz &lt;dbl&gt;, ion_mobility &lt;dbl&gt;, n &lt;int&gt;\n\nmsdial |&gt; filter(is.na(`Average Rt(min)`) | is.na(`Average Mz`) | is.na(`Average mobility`)) #check that there are no missing values. Need to have entries for each obesrvation\n\n# A tibble: 0 × 22\n# ℹ 22 variables: Alignment ID &lt;chr&gt;, Average Rt(min) &lt;dbl&gt;, Average Mz &lt;dbl&gt;,\n#   Average mobility &lt;dbl&gt;, Average CCS &lt;dbl&gt;, Metabolite name &lt;chr&gt;,\n#   Adduct type &lt;chr&gt;, Post curation result &lt;chr&gt;, Fill % &lt;dbl&gt;,\n#   MS/MS assigned &lt;lgl&gt;, Annotation tag (VS1.0) &lt;dbl&gt;,\n#   Manually modified for quantification &lt;lgl&gt;,\n#   Manually modified for annotation &lt;lgl&gt;, S/N average &lt;dbl&gt;,\n#   Spectrum reference file name &lt;chr&gt;, MS1 isotopic spectrum &lt;chr&gt;, …\n\nmsdial |&gt; count(`Average Rt(min)`, `Average Mz`, `Average mobility`) |&gt; filter(n&gt;1) #check that the variables uniquely identifies each feature\n\n# A tibble: 0 × 4\n# ℹ 4 variables: Average Rt(min) &lt;dbl&gt;, Average Mz &lt;dbl&gt;,\n#   Average mobility &lt;dbl&gt;, n &lt;int&gt;\n\n\nTo combine two data frames by using the join -functions (left_join(), inner_join(), right_join(), full_join(), semi_join(), anti_join()) in dplyr -packages.\nleft_join(): output will have the same number of rows as input data frame x.\n\nmzmine2 &lt;- mzmine #copied the data frames only for testing purposes\nunifi2 &lt;- unifi\nmsdial2 &lt;- msdial\n\n#MsDial data does not have mz and rt ranges as MzMine data has, therefore added manually\nmsdial2$mz_min &lt;- msdial2$`Average Mz`-0.005\nmsdial2$mz_max &lt;- msdial2$`Average Mz`+0.005\nmsdial2$rt_min &lt;- msdial2$`Average Rt(min)`-0.08\nmsdial2$rt_max &lt;- msdial2$`Average Rt(min)`+0.08\n\n#finds the compounds from unifi in the mzmine data by using the join function\nsubset_mzmine &lt;- unifi2 |&gt; inner_join(mzmine2, join_by(overlaps(\"mz_unifi\",\"mz_unifi\",\"mz_range:min\", \"mz_range:max\"),overlaps(\"rt_unifi\",\"rt_unifi\",\"rt_range:min\", \"rt_range:max\"))) |&gt; \n  filter(abs(dt_unifi - ion_mobility) &lt; 2) \n\n#subset_msdial &lt;- unifi2 |&gt; inner_join(msdial2, join_by(overlaps(\"mz_unifi\",\"mz_unifi\",\"mz_min\", \"mz_max\"),overlaps(\"rt_unifi\",\"rt_unifi\",\"rt_min\", \"rt_max\"))) |&gt; filter(abs(dt_unifi - `Average mobility`) &lt; 1.7) \n\n#finds the compounds from unifi in the msdial data by using the join function\nsubset_msdial &lt;- unifi2 |&gt; \n  inner_join(msdial2, join_by(overlaps(\"mz_unifi\",\"mz_unifi\",\"mz_min\", \"mz_max\"),overlaps(\"rt_unifi\",\"rt_unifi\",\"rt_min\", \"rt_max\"))) |&gt; \n  group_by(mz_unifi) |&gt; \n  mutate(dt_diff = abs(dt_unifi - `Average mobility`)) |&gt; \n  filter(dt_diff &lt;=min(dt_diff))\n\nno_duplicates_msdial &lt;- subset_msdial[!duplicated(subset_msdial$compound), ] #removes the second duplicate feature\n\nTo easier be able to calculate the mass error, a function was created.\n\\(MassError[ppm]=\\frac{\\textit{m/z}_{theretical}-\\mathit{m/z}_{measured}}{\\mathit{m/z}_{theoretical}}*10^6\\)\n\n#function to calculate the mass error \nmass_error &lt;- function(mz_theoretical,mz_meaured){\n  mass_error &lt;- (mz_theoretical-mz_meaured)/mz_theoretical*10^6\n  return(mass_error)\n}\n\nmass_error(qc_compounds$mz,subset_mzmine$mz)\n\n[1] 4.668887 2.921764 2.480781 4.989491 2.218073 2.324936 3.366355 4.891932\n[9] 2.174436\n\nmass_error(qc_compounds$mz,no_duplicates_msdial$`Average Mz`)\n\n[1] 3.6167435 0.6151083 1.0066936 0.1313024 2.4109492 0.7439795 2.0748605\n[8] 2.7352736 0.4612441\n\n\n\n\nThe following part is used with the “first method” of extracting the correct compounds from msdial and mzmine because ti was written before the other method was written. Sorry for the mess in jumping between different parts.\n\n#calculate the mass accuracy for mzmine, msdial, and unif based on the qc_compounds values. First the m/z values are sorted from small to large so the calculations can be performed row-wise for the correct compound in QC_compounds and the data. Lastly, the results are added to a column in a new object.\n\nqc_compounds &lt;- arrange(qc_compounds, mz)\nmass_errors &lt;- as.data.frame(qc_compounds[1:2]) #create an data frame to add all the mass errors to \n\n#calculate mass errors\nmzmine_subset &lt;- mzmine_subset |&gt; arrange(mz) |&gt; mutate(Mass_error_ppm = round((qc_compounds$mz-mz)/qc_compounds$mz*10^6,3)) \nmsdial_subset &lt;- msdial_subset |&gt; arrange(`Average Mz`) |&gt; mutate(Mass_error_ppm = round((qc_compounds$mz - `Average Mz`) /qc_compounds$mz * 10^6,3))\nunifi &lt;- unifi |&gt; arrange(mz_unifi) |&gt; mutate(Mass_error_ppm = round((qc_compounds$mz - mz_unifi) /qc_compounds$mz * 10^6,3))\n\n#adds the mass errors to the mass error data frame\nmass_errors$Mzmine &lt;- mzmine_subset$Mass_error_ppm\nmass_errors$MsDial &lt;- msdial_subset$Mass_error_ppm\nmass_errors$Unifi &lt;- unifi$Mass_error_ppm\n\n#Adds a column that tells if the Mzmine or MsDial Mass errors are close or far away from the error of Unifi\nmass_errors &lt;- mass_errors |&gt; mutate(mzmine_fromunifi = case_when(abs(Unifi - Mzmine) &gt; 2 ~ \"Large\",\n                                                   abs(Unifi - Mzmine) &lt;= 2 & abs(Unifi - Mzmine) &gt; 0.3 ~ \"Medium\",\n                                                   abs(Unifi - Mzmine) &lt;= 0.3 ~ \"Small\")) |&gt; \n  mutate(msdial_fromunifi = case_when(abs(Unifi - MsDial) &gt; 2 ~ \"Large\",\n                                                   abs(Unifi - MsDial) &lt;= 2 & abs(Unifi - MsDial) &gt; 0.3 ~ \"Medium\",\n                                                   abs(Unifi - MsDial) &lt;= 0.3 ~ \"Small\"))\n\nNext parts of chunks are for plotting the data for the QC compounds.\n\n#Plot the mass errors towards the theoretical m/z values\nmass_errors$msdial_fromunifi &lt;- as.factor(mass_errors$msdial_fromunifi)\nmass_errors$mzmine_fromunifi &lt;- as.factor(mass_errors$mzmine_fromunifi)\n  \np &lt;- ggplot(data=mass_errors, mapping=aes(x=mz))+\n  geom_point(aes(y=Mzmine, colour=\"Mzmine\", shape=\"Mzmine\", size=mzmine_fromunifi), alpha = 0.7)+ #mass erros values from mzmine and adds size of the plots according to how far away they are from unifi\n  geom_point(aes(y=MsDial, colour=\"MsDial\", shape=\"MsDial\", size=msdial_fromunifi), alpha = 0.7)+ #mass erros values from msdial and adds size of the plots according to how far away they are from unifi\n  geom_line(aes(y=Unifi, colour=\"Unifi\"),size=0.5)+ #plot Unifi data \n  \n  scale_size_manual(name=\"Distance from Unifi\", values = c(\"Large\"=4.2, \"Medium\"=2.8, \"Small\"=2))+\n  scale_shape_manual(values = c(\"Mzmine\" = 19, \"MsDial\" = 17)) +\n  scale_colour_manual(values = c(\"Mzmine\" = \"darkred\", \"MsDial\" = \"black\", \"Unifi\" = \"darkgrey\")) + #colours of points\n  labs(fill = \"\", y = \"Mass Accuracy [ppm]\", x=expression(paste(\"Theoretical \",italic(\"m/z\"), \" values\"))) +\n  \n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"red\", linewidth = 0.1) + #adds horzontal line at y=0\n  \n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    aspect.ratio = 0.5,  # Set aspect ratio\n    plot.margin = margin(0.5, 0.5, 0.4, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=9),\n    legend.position = \"right\",\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    #legend.title = element_blank(), #removes the title of the legend\n    legend.title = element_text(size=9),\n    legend.margin = margin(0.001, 1, 0.5, 0.5),)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\np  + geom_text(aes(x=mz+10, y=Unifi,label=compound), size=2, colour=\"red4\",\n               nudge_x = 0.25, nudge_y = 0.25, \n               check_overlap = FALSE) #adds a text for the mean point\n\n\n\n#+ guides(size = \"none\")\n\n\n#RT and DT difference between MS-Dial and Mzmine compared to UNIFI\n\n#adding and then renaming the RT columns from each file\nrt_difference &lt;- data.frame(qc_compounds[,], msdial_subset[,3], mzmine_subset[,4], unifi[,3]) |&gt; rename(MsDial_RT=\"Average.Rt.min.\", MzMine_RT=\"rt\", Unifi_RT=\"unifi...3.\")\n#adding and then renaming the DT columns from each file\ndt_difference &lt;- data.frame(qc_compounds[,], msdial_subset[,4], mzmine_subset[,3], unifi[,4]) |&gt; rename(MsDial_DT=\"Average.mobility\", MzMine_DT=\"ion_mobility\", Unifi_DT=\"unifi...4.\")\n\ndt_difference &lt;- dt_difference |&gt; \n  mutate(\"diff_msdial\" = MsDial_DT - Unifi_DT) |&gt; \n  mutate(\"diff_mzmine\" = MzMine_DT - Unifi_DT)\n\n#rt_difference &lt;- rt_difference |&gt; mutate(mzmine_fromunifi = case_when(abs(Unifi - Mzmine) &gt; 2 ~ \"Large\",\n#                                                   abs(Unifi_RT - MzMine_RT) &lt;= 2 & abs(Unifi_RT - MzMine_RT) &gt; 0.3 ~ \"Medium\",\n#                                                   abs(Unifi_RT - MzMine_RT) &lt;= 0.3 ~ \"Small\")) |&gt; mutate(msdial_fromunifi = case_when(abs(Unifi_RT - MsDial_RT) &gt; 2 ~ \"Large\",\n#                                                   abs(Unifi_RT - MsDial_RT) &lt;= 2 & abs(Unifi_RT - MsDial_RT) &gt; 0.3 ~ \"Medium\",\n#                                                   abs(Unifi_RT - MsDial_RT) &lt;= 0.3 ~ \"Small\"))\n\nrt_difference_long &lt;- rt_difference |&gt; pivot_longer(cols = 3:5,\n                            names_to = \"Software\",\n                            values_to = \"RT_softwares\") \n\ndt_difference_long &lt;- dt_difference |&gt; pivot_longer(cols = 3:5,\n                            names_to = \"software_name\",\n                            values_to = \"DT_softwares\") \n\n\nrt_difference_long |&gt; filter(Software != \"MsDial_RT\" & Software != \"MzMine_RT\")\n\n# A tibble: 9 × 4\n  compound               mz Software RT_softwares\n  &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n1 acetaminophen        152. Unifi_RT         0.56\n2 caffeine             195. Unifi_RT         1.3 \n3 sulfaguanidine       215. Unifi_RT         0.31\n4 sulfadimethoxine     311. Unifi_RT         2.96\n5 val-tyr-val          380. Unifi_RT         1.28\n6 verapamil            455. Unifi_RT         3.26\n7 terfenadine          472. Unifi_RT         3.66\n8 leucine enkephaline  556. Unifi_RT         2.37\n9 reserpine            609. Unifi_RT         3.37\n\n\n\n#Plot of RT vs theoretical m/z values for the different softwares\nb &lt;- ggplot(data=rt_difference_long, mapping=aes(x=mz, y=RT_softwares))+\n  geom_bar(stat = \"identity\",position=position_dodge(), aes(fill=Software))+\n  \n  scale_fill_manual(values = c(\"MzMine_RT\" = \"darkred\", \"MsDial_RT\" = \"darkgreen\", \"Unifi_RT\" = \"darkgrey\")) + #colours of points\n  labs( y = \"Retention time [min]\", x=expression(paste(\"Theoretical \",italic(\"m/z\"), \" values\"))) +\n  scale_y_continuous(limit=c(0,4),expand = c(0,0))+\n  \n  #geom_text(aes(x=mz, y=RT_softwares, label=compound), size=2, colour=\"red4\",\n  #             nudge_x = 0.25, nudge_y = 0.25, \n  #             check_overlap = FALSE)+\n  \n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid.major = element_blank(),  # Remove grid lines\n    panel.grid.minor = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    #aspect.ratio = 1,  # Set aspect ratio\n    plot.margin = margin(0.5, 0.5, 0.4, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=9),\n    #legend.position = c(0.85, 0.85),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(),\n    #legend.margin = margin(0.001, 1, 0.5, 0.5)\n)\n\nb + geom_label(data=rt_difference, mapping=aes(x=mz, y=MsDial_RT, label=compound),\n              size=2, colour=\"black\",\n              nudge_x = 0.25, nudge_y = 0.15) \n\n\n\n\n\n#Plot of DT vs theoretical m/z values for the different softwares\nd &lt;- ggplot(data=dt_difference_long, mapping=aes(x=mz, y=DT_softwares))+\n  geom_bar(stat = \"identity\",position=position_dodge(), aes(fill=software_name))+\n  \n  scale_fill_manual(values = c(\"MzMine_DT\" = \"darkred\", \"MsDial_DT\" = \"darkgreen\", \"Unifi_DT\" = \"darkgrey\")) +\n  labs( y = \"Drift Time [ms]\", x=expression(paste(\"Theoretical \",italic(\"m/z\"), \" values\"))) +\n  scale_y_continuous(limit=c(0,10),expand = c(0,0))+ #removes the gap between the bars and the x-axis\n  \n\n  geom_line(data=dt_difference, color=\"black\", aes(x=mz, y=Unifi_DT),size = 0.5, linetype = \"dashed\")+ #plots black line for Unifi_DT\n  \n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid.major = element_blank(),  # Remove grid lines\n    panel.grid.minor = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    plot.margin = margin(0.5, 0.5, 0.4, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=9),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(),\n)\n\nd + geom_label(data=dt_difference, mapping=aes(x=mz-10, y=MzMine_DT, label=compound),\n              size=2, colour=\"black\", nudge_y = 0.7, \n              ) #hjust=\"inward\"\n\n\n\nd\n\n\n\n#Plot DT only for MSDial and adds regression line\nd1 &lt;- dt_difference |&gt; filter(diff_msdial&gt;0.5) |&gt; #exlucde \"outlier\"\n  ggplot(mapping=aes(x=mz, y=diff_msdial))+\n  geom_point(size=1)+  \n  geom_smooth(method=\"loess\", size=0.6, se=FALSE, linetype=\"dashed\", color=\"darkred\")+\n  stat_cor(aes(label=..rr.label..), label.x=400, label.y=1.2, size=3, colour=\"black\", r.digits = 5)+ #adds R^2\n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    aspect.ratio = 1,  # Set aspect ratio\n    plot.margin = margin(0.5, 0.5, 0.4, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=9),\n    legend.position = c(0.25, 0.85),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(), #removes the title of the legend\n    legend.margin = margin(0.001, 1, 0.5, 0.5))\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n\nd1\n\nWarning: The dot-dot notation (`..rr.label..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(rr.label)` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n#Plot DT only for Mzmine and adds regression line\nd2 &lt;- dt_difference |&gt; filter(compound != \"terfenadine\") |&gt; \n  ggplot(mapping=aes(x=mz, y=diff_mzmine))+\n  geom_point(size=1)+  \n  geom_smooth(method=\"loess\", size=0.6, se=FALSE, linetype=\"dashed\", color=\"darkgreen\")+\n  stat_cor(aes(label=..rr.label..), label.x=200, label.y=1.4, size=3, colour=\"black\", r.digits = 5)+ #adds R^2\n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    aspect.ratio = 1,  # Set aspect ratio\n    plot.margin = margin(0.5, 0.5, 0.4, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=9),\n    legend.position = c(0.25, 0.85),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(), #removes the title of the legend\n    legend.margin = margin(0.001, 1, 0.5, 0.5))\nd2\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n#Show both Mzmine and Msdial\nggarrange(d1, d2,\n          labels = c(\"A\", \"B\"),\n          #ncol = 1, nrow = 2,\n          widths = 2, heights = 10)\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "qc_hdmse_peak.html#drug-mixture",
    "href": "qc_hdmse_peak.html#drug-mixture",
    "title": "3  Data Analysis",
    "section": "3.2 Drug mixture",
    "text": "3.2 Drug mixture\nThe data used for this section is of a mixture of different drugs (200 ppb) including some Isotopically labeled internal standards (IS, 100 ppb). The data has been measured in ESI(+)-LC-IMS-HRMS (MSe mode, HDMSe) with different settings, here called old and new settings where the later is supposed to be more suitable for labile compounds. The data was processed in MZmine.\n\n#Import the data from mzmine, and the excel sheet containing the target compounds and IS compounds.\ndata_drugmix &lt;- read_csv(\"~/Project/hrms_converter-2024/new_old_settings_drugmix_featurelist_MzMine.csv\", show_col_types = FALSE) |&gt; \n  select(-`charge`,-`fragment_scans`,-`alignment_scores:rate`, -`alignment_scores:aligned_features_n`,-`alignment_scores:align_extra_features`,-`alignment_scores:weighted_distance_score`,-`alignment_scores:mz_diff_ppm`,-`alignment_scores:mz_diff`,-`alignment_scores:rt_absolute_error`,-`alignment_scores:ion_mobility_absolute_error`,-`intensity_range:min`,-`intensity_range:max`)\n\ntarget_drugs &lt;- read_excel(\"~/Project/hrms_converter-2024/illicit drugs CS-IS_data.xlsx\", na = \"NA\") |&gt; \n  filter(Class==\"Analyte\") |&gt; \n  mutate(rt_target_min = Vion_RT - 0.05) |&gt; \n  mutate(rt_target_max = Vion_RT + 0.05) |&gt; \n  select(-`Monoisomass`, -`Adduct_ion`,  -`Vion_observed_mz`, -`Agilent_observed_mz`, -`Agilent_RT`)\n\n\n#find the target compounds in the drug_mix data\nfound_drugs &lt;- target_drugs |&gt; inner_join(data_drugmix, join_by(overlaps(\"Theor_adduct_mz\",\"Theor_adduct_mz\",\"mz_range:min\", \"mz_range:max\"))) |&gt; \n  select(1:11, mz, height, everything()) #reorder columns\n\nfiltered_found_drugs &lt;-found_drugs |&gt; filter(\n  !(`height` &lt; 500), #removes rows with height less than 500\n  !(!is.na(Vion_RT) & (\"rt\" &lt; \"rt_target_min\" & \"rt\" &gt; \"rt_target_max\")) #for those with prev. measured RT, compares them with currect RT\n) |&gt; \n  slice_max(by=Compound, height) #to remove multiple features assigned the same compound by only keeping the ones with largest height. Due to not having any DT values to compare to filter the data more\n\n\n#calculate the mass error and height and area ratio between new and old data\nfiltered_found_drugs &lt;- filtered_found_drugs |&gt; \n  mutate(Mass_error_ppm = mass_error(Theor_adduct_mz, mz), .after = \"mz\")|&gt;  #adds the mass error (calculated with the function) to a new column after m/z values\n  mutate(height_ratio = `datafile:Drugdtd-200ppb-newsetting_1_A,2_1.mzML:height`/`datafile:Drugstd-200ppb_1_A,3_1.mzML:height`, .after=\"height\") |&gt; #adds the ratio between the height of the old and new settings \n  mutate(area_ratio = `datafile:Drugdtd-200ppb-newsetting_1_A,2_1.mzML:area`/`datafile:Drugstd-200ppb_1_A,3_1.mzML:area`, .after=\"area\") |&gt; \n  mutate(diff_DT = ion_mobility - DT_UNIFI, .after=\"ion_mobility\") #different in ion mobility for the processed data compared to UNIFI\n\n\np1 &lt;-ggplot(filtered_found_drugs, mapping = aes(x=mz, y=area_ratio, label=Compound))+ #plot area ratio\n  geom_point()+\n  geom_hline(yintercept = 1, linetype = \"dashed\", color = \"red\", linewidth = 0.1) + #adds horzontal line at y=0\n  \n  geom_label_repel(size = 2.5,\n                   point.padding = NA, # additional padding around each point\n                   min.segment.length = 0, # draw all line segments\n                   force=2,\n                   nudge_x=5, nudge_y=-0.03\n                   )+\n  \n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid.major = element_blank(),  # Remove grid lines\n    panel.grid.minor = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    plot.margin = margin(0.5, 0.5, 0.4, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=9),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(),\n)\np2 &lt;- ggplot(filtered_found_drugs, mapping=aes(x=mz,y=height_ratio,label=Compound))+ #plot height ratio\n  geom_point()+\n  geom_hline(yintercept = 1, linetype = \"dashed\", color = \"red\", linewidth = 0.1) + #adds horzontal line at y=0\n  \n  geom_label_repel(size = 2.5,\n                   point.padding = NA, # additional padding around each point\n                   min.segment.length = 0, # draw all line segments\n                   force=2,\n                   nudge_x=5, nudge_y=-0.03\n                   )+\n  \n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid.major = element_blank(),  # Remove grid lines\n    panel.grid.minor = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    plot.margin = margin(0.5, 0.5, 0.4, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=9),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(),\n) \n\nggarrange(p1, p2,\n          labels = c(\"A\", \"B\"),\n          #ncol = 1, nrow = 2,\n          widths = 2, heights = 10)\n\n\n\n\n\n#Plot of DT difference between MZmine and UNIFI\np3 &lt;- filtered_found_drugs |&gt; \n  ggplot(mapping=aes(x=Theor_adduct_mz, y=diff_DT))+\n  geom_point(size=1)+  \n  geom_smooth(method=\"loess\", size=0.6, se=FALSE, linetype=\"dashed\", color=\"darkblue\")+\n  stat_cor(aes(label=..rr.label..), label.x=200, label.y=1.2, size=3, colour=\"black\", r.digits = 5)+ #adds R^2\n\n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    aspect.ratio = 1,  # Set aspect ratio\n    plot.margin = margin(0.5, 0.5, 0.4, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=9),\n    legend.position = c(0.25, 0.85),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(), #removes the title of the legend\n    legend.margin = margin(0.001, 1, 0.5, 0.5))\np3\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 3 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 3 rows containing non-finite outside the scale range\n(`stat_cor()`).\n\n\nWarning: Removed 3 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\np4 &lt;- filtered_found_drugs |&gt; \n  ggplot(mapping=aes(x=DT_UNIFI, y=diff_DT))+\n  geom_point(size=1)+  \n  geom_smooth(method=\"loess\", size=0.6, se=FALSE, linetype=\"dashed\", color=\"orange\")+\n  stat_cor(aes(label=..rr.label..), label.x=4, label.y=1.2, size=3, colour=\"black\", r.digits = 5)+ #adds R^2\n\n  theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    aspect.ratio = 1,  # Set aspect ratio\n    plot.margin = margin(0.5, 0.5, 0.4, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=9),\n    legend.position = c(0.25, 0.85),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(), #removes the title of the legend\n    legend.margin = margin(0.001, 1, 0.5, 0.5))\np4\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 3 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 3 rows containing non-finite outside the scale range\n(`stat_cor()`).\n\n\nWarning: Removed 3 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\nggarrange(p3, p4,\n          labels = c(\"A\", \"B\"),\n          #ncol = 1, nrow = 2,\n          widths = 2, heights = 10)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 3 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 3 rows containing non-finite outside the scale range\n(`stat_cor()`).\n\n\nWarning: Removed 3 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 3 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 3 rows containing non-finite outside the scale range\n(`stat_cor()`).\n\n\nWarning: Removed 3 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n#Import and find the IS compounds in the processed durg mixture data\ntarget_IS &lt;- read_excel(\"~/Project/hrms_converter-2024/illicit drugs CS-IS_data.xlsx\", na = \"NA\") |&gt; \n  filter(Class==\"IS\") |&gt; \n  select(-`Monoisomass`, -`Adduct_ion`,  -`Vion_observed_mz`, -`Agilent_observed_mz`, -`Agilent_RT`)\n\n\nfound_IS &lt;- target_IS |&gt; inner_join(data_drugmix, join_by(overlaps(\"Theor_adduct_mz\",\"Theor_adduct_mz\",\"mz_range:min\", \"mz_range:max\"))) |&gt; \n  select(1:11, mz, height, everything()) |&gt;  #reorder columns \n  mutate(Mass_error_ppm = mass_error(Theor_adduct_mz, mz), .after = \"mz\")\n  \nfiltered_found_IS &lt;- found_IS |&gt;  slice_min(by=Compound, abs(Mass_error_ppm)) #only keeps the rows with the smallest absolut mass error for each compound\n\n\n#normalise the heights for the new and old with the IS corresponding IS\nnormalisation_IS &lt;- inner_join(x=filtered_found_drugs, y=filtered_found_IS, join_by(x$Formula == y$Formula)) |&gt; \n  mutate(normalised_height_NEW = `datafile:Drugdtd-200ppb-newsetting_1_A,2_1.mzML:height.x`/`datafile:Drugdtd-200ppb-newsetting_1_A,2_1.mzML:height.y`, .after=\"height.x\") |&gt; \n  mutate(normalised_height_OLD = `datafile:Drugstd-200ppb_1_A,3_1.mzML:height.x`/`datafile:Drugstd-200ppb_1_A,3_1.mzML:height.y`, .after=\"height.x\") |&gt; \n  mutate(RT_diff = rt.x-rt.y, .after=\"rt.x\") |&gt; \n  mutate(mz_error_diff = Mass_error_ppm.x-Mass_error_ppm.y, .after=\"mz.x\") |&gt; \n  mutate(DT_diff = ion_mobility.x-ion_mobility.y, .after=\"ion_mobility.x\")\n\n######################################################################\nnormalisation_IS$plot &lt;- NA #empy column to put plot in\nplot_object &lt;- ggplot(data = normalisation_IS, aes(x=normalised_height_OLD, y=normalised_height_NEW))+geom_point(colour=\"darkgreen\")+theme_minimal()+theme(legend.position=\"none\")  #create plot object to put in empty colum in the table\n\n#library(gt) #package for makeing tables + library(gtExtras) # plot in table\n\n#creates a table of selected column from normalisation_IS data\n gt_tab &lt;- normalisation_IS |&gt; select(Compound.x, Formula, RT_diff, DT_diff, mz_error_diff, normalised_height_OLD, normalised_height_NEW,plot) |&gt; \n    gt() |&gt;\n   tab_options(table.font.color=\"black\")|&gt; \n    tab_header(\n      title=md(\"**Drug mixture - 200 ppb**\"), #**to make bold\n      subtitle =md(\"For **new** and **old** MS settings analytes with corresponding *Internal Standard*\") #* to make italic\n      ) |&gt; \n    fmt_number(columns = c(RT_diff, DT_diff, mz_error_diff,normalised_height_OLD, normalised_height_NEW), decimals=3) |&gt;  #to formate numbers, can select specific columns to display certain nr. of deicmals for example. \n    tab_footnote(\n    footnote = \"Isomeric compounds. They have been matched to the same feature, hence, the reason for the identical values.\",\n    locations = cells_body(columns = Compound.x, rows = 1:2)\n  ) |&gt; \n    tab_footnote(\n    footnote = md(\"The large mass error difference between *analyte* and *IS* is due to a larger mass error for the corresponding IS (10.9 compared to analyte -0.101)\"),\n    locations = cells_body(\n      columns = mz_error_diff,\n      rows = mz_error_diff == min((mz_error_diff))\n    )\n  ) |&gt; \n    tab_row_group(\n    label = md(\"*Methamphetamine-d9*\"), #or can use gt(groupname_col=\"Compound.y\") to add groupnames for all analytes\n    rows = 1:2\n  ) |&gt; \n    tab_spanner(\n    label = \"Analyte Information\",\n    columns = c(Compound.x, Formula)\n  ) |&gt; \n    tab_spanner(\n    label = md(\"Normalisation as &lt;br&gt; *analyte_height/IS_height*\"),\n    columns = c(normalised_height_OLD, normalised_height_NEW)\n  )|&gt; \n    tab_spanner(\n    label = md(\"Differences as &lt;br&gt; *Analyte* - *IS*\"),\n    columns = c(RT_diff, DT_diff, mz_error_diff)\n  ) |&gt; \n    cols_label(\n    Compound.x = html(\"Analyte Name\"),\n    Formula = html(\"Molecular formula\"),\n    RT_diff = html(\"Retention Time ,&lt;br&gt;min\"),\n    DT_diff = html(\"Drift Time ,&lt;br&gt;ms\"),\n    mz_error_diff = html(\"Mass Error,&lt;br&gt;ppm\"),\n    normalised_height_OLD = html(\"OLD\"),\n    normalised_height_NEW = html(\"NEW\"),\n  ) |&gt; \n   tab_style(\n    style = list(\n      cell_fill(color = \"lightcyan\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_body(\n      columns = normalised_height_OLD\n    ) \n  ) |&gt; \n     tab_style(\n    style = list(\n      cell_fill(color = \"#F9E3D6\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_body(\n      columns = normalised_height_NEW\n    ) \n  ) |&gt; \n    tab_style(\n    style = list(\n      cell_text(color=\"red\")\n      ),\n    locations = cells_body(\n      columns = mz_error_diff,\n      rows = mz_error_diff ==min((mz_error_diff))\n    ) \n  )|&gt; \n   text_transform(\n     locations = cells_body(columns = plot),\n     fn = function(x) {\n       plot_object |&gt; \n         ggplot_image((height=px(200)))\n     }\n   )\ngt_tab\n\n\n\n\n\n  \n    \n      Drug mixture - 200 ppb\n    \n    \n      For new and old MS settings analytes with corresponding Internal Standard\n    \n    \n      \n        Analyte Information\n      \n      \n        Differences as  Analyte - IS\n      \n      \n        Normalisation as  analyte_height/IS_height\n      \n      plot\n    \n    \n      Analyte Name\n      Molecular formula\n      Retention Time ,min\n      Drift Time ,ms\n      Mass Error,ppm\n      OLD\n      NEW\n    \n  \n  \n    \n      Methamphetamine-d9\n    \n    Phentermine1\nC10H15N\n0.017\n0.000\n1.115\n0.642\n0.365\n\n    Methamphetamine1\nC10H15N\n0.017\n0.000\n1.115\n0.642\n0.365\n\n    \n      \n    \n    MDMA\nC11H15NO2\n0.015\n−0.024\n−1.235\n1.716\n1.290\n\n    MDEA\nC12H17NO2\n0.012\n−0.024\n−0.635\n1.663\n2.001\n\n    Benzoylecgonine\nC16H19NO4\n0.000\n0.000\n−0.404\n2.419\n2.320\n\n    THC-COOH\nC21H28O4\n−0.002\n−0.095\n2 −11.002\n3.269\n2.502\n\n  \n  \n  \n    \n      1 Isomeric compounds. They have been matched to the same feature, hence, the reason for the identical values.\n    \n    \n      2 The large mass error difference between analyte and IS is due to a larger mass error for the corresponding IS (10.9 compared to analyte -0.101)\n    \n  \n\n\n\n#gt_tab |&gt; gtsave(filename = \"tab_1.html\") #saves the table in HTML format\n#gt_tab |&gt; gtsave(filename = \"tab_1.tex\") #saves the table in LaTEX format\n#gt_tab |&gt; gtsave(filename = \"tab_1.docx\") #saves the table in WORD format\n\n\n\nagg_iris = normalisation_IS  |&gt; \n    group_by(Compound.x)  |&gt; \n    reframe(\n        normalised_height= list(normalised_height_OLD, normalised_height_NEW),\n    )\n\nagg_iris |&gt; gt() |&gt; gt_plt_sparkline(column = normalised_height)\n\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n\n\n\n\n\n\n  \n    \n      Compound.x\n      normalised_height\n    \n  \n  \n    Benzoylecgonine\n          2.4\n    Benzoylecgonine\n          2.3\n    MDEA\n          1.7\n    MDEA\n          2.0\n    MDMA\n          1.7\n    MDMA\n          1.3\n    Methamphetamine\n          0.6\n    Methamphetamine\n          0.37\n    Phentermine\n          0.6\n    Phentermine\n          0.37\n    THC-COOH\n          3.3\n    THC-COOH\n          2.5"
  },
  {
    "objectID": "qc_hdmse_peak.html#drug-mix-2024-03-20",
    "href": "qc_hdmse_peak.html#drug-mix-2024-03-20",
    "title": "3  Data Analysis",
    "section": "3.3 Drug mix 2024-03-20",
    "text": "3.3 Drug mix 2024-03-20\nThe drug mixture has been measured as above, but has been measured with different settings such as LC-gradient, desolvation temperature, etc.\n\n#Import the data and calculate the mass error depending on the the adduct the compounds is found as \ndrugmix &lt;- read_excel(\"~/Project/hrms_converter-2024/illicit drugs CS-IS_data - MassErrors_Calculations.xlsx\", \n    sheet = \"Drugmix_240320_21 (2)\") \ndrugmix &lt;- drugmix |&gt; \n  mutate(Mass_acc=case_when(`mode...14` == \"[M+H]+\" ~ mass_error(Theor_adduct_mz, `m/z...9`),\n                            `mode...14` == \"[M+Na]+\" ~ mass_error(`Theor. [M+Na]+`, `m/z...9`),\n                            `mode...14` == \"[M+NH4]+\" ~ mass_error(`Theor. [M+NH4]+`, `m/z...9`)), .after=`mode...14`) |&gt; \n  mutate(Mass_acc2=case_when(`mode...21` == \"[M+H]+\" ~ mass_error(Theor_adduct_mz, `m/z...16`),\n                            `mode...21` == \"[M+Na]+\" ~ mass_error(`Theor. [M+Na]+`, `m/z...16`),\n                            `mode...21` == \"[M+NH4]+\" ~ mass_error(`Theor. [M+NH4]+`, `m/z...16`)), .after=`mode...21`) |&gt; \n  mutate(Mass_acc3=case_when(`mode...28` == \"[M+H]+\" ~ mass_error(Theor_adduct_mz, `m/z...23`),\n                            `mode...28` == \"[M+Na]+\" ~ mass_error(`Theor. [M+Na]+`, `m/z...23`),\n                            `mode...28` == \"[M+NH4]+\" ~ mass_error(`Theor. [M+NH4]+`, `m/z...23`)), .after=`mode...28`) |&gt; \n  mutate(Mass_acc4=case_when(`mode...35` == \"[M+H]+\" ~ mass_error(Theor_adduct_mz, `m/z...30`),\n                            `mode...35` == \"[M+Na]+\" ~ mass_error(`Theor. [M+Na]+`, `m/z...30`),\n                            `mode...35` == \"[M+NH4]+\" ~ mass_error(`Theor. [M+NH4]+`, `m/z...30`)), .after=`mode...35`) |&gt; \n  mutate(Mass_acc5=case_when(`mode...42` == \"[M+H]+\" ~ mass_error(Theor_adduct_mz, `m/z...37`),\n                            `mode...42` == \"[M+Na]+\" ~ mass_error(`Theor. [M+Na]+`, `m/z...37`),\n                            `mode...42` == \"[M+NH4]+\" ~ mass_error(`Theor. [M+NH4]+`, `m/z...37`)), .after=`mode...42`)\n\n##DID NOT WORK AS INTENDEN DUE TO THE FORMAT OF THE EXCEL SHEET##########\ndrugmix |&gt; \n  pivot_longer(cols = c(`detector count...13`, `detector count...20`, `detector count...27`, `detector count...34`,`detector count...41`),\n                            names_to = \"detectorcoun_comb\",\n                            values_to = \"Intensities\") \n\n# A tibble: 105 × 53\n   Compound           Class Formula Monoisomass Theor_adduct_mz `Theor. [M+Na]+`\n   &lt;chr&gt;              &lt;chr&gt; &lt;chr&gt;         &lt;dbl&gt;           &lt;dbl&gt;            &lt;dbl&gt;\n 1 3,4-methylenediox… Anal… C10H13…        179.            180.             202.\n 2 3,4-methylenediox… Anal… C10H13…        179.            180.             202.\n 3 3,4-methylenediox… Anal… C10H13…        179.            180.             202.\n 4 3,4-methylenediox… Anal… C10H13…        179.            180.             202.\n 5 3,4-methylenediox… Anal… C10H13…        179.            180.             202.\n 6 6-acetylmorphine   Anal… C19H21…        327.            328.             350.\n 7 6-acetylmorphine   Anal… C19H21…        327.            328.             350.\n 8 6-acetylmorphine   Anal… C19H21…        327.            328.             350.\n 9 6-acetylmorphine   Anal… C19H21…        327.            328.             350.\n10 6-acetylmorphine   Anal… C19H21…        327.            328.             350.\n# ℹ 95 more rows\n# ℹ 47 more variables: `Theor. [M+NH4]+` &lt;dbl&gt;,\n#   `UNIFI - HDMSe-destemp450_240320` &lt;lgl&gt;, `m/z...9` &lt;dbl&gt;,\n#   `RT [min]...10` &lt;dbl&gt;, DT...11 &lt;dbl&gt;, CCS...12 &lt;dbl&gt;, mode...14 &lt;chr&gt;,\n#   Mass_acc &lt;dbl&gt;, `UNIFI - HDMSe-gradientchange_240320` &lt;lgl&gt;,\n#   `m/z...16` &lt;dbl&gt;, `RT [min]...17` &lt;dbl&gt;, DT...18 &lt;dbl&gt;, CCS...19 &lt;dbl&gt;,\n#   mode...21 &lt;chr&gt;, Mass_acc2 &lt;dbl&gt;, …\n\n#################################\n\n#plot the intensities of the compounds for each type of measurement\nf1 &lt;- ggplot(drugmix, aes(x=Theor_adduct_mz, y=`detector count...13`))+\n  geom_point()+\n  geom_point(aes(x=Theor_adduct_mz, y=`detector count...20`), color=\"red\")+\n  geom_point(aes(x=Theor_adduct_mz, y=`detector count...27`), color=\"green\")+\n  geom_point(aes(x=Theor_adduct_mz, y=`detector count...34`), color=\"blue\")+\n  geom_point(aes(x=Theor_adduct_mz, y=`detector count...41`), color=\"orange\")+\n  \n  labs( y = \"Detector Count\", x=expression(paste(\"Theoretical \",italic(\"m/z\"), \" values\"))) +\n  \n    theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid.major = element_blank(),  # Remove grid lines\n    panel.grid.minor = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    plot.margin = margin(0.5, 0.5, 0.4, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=9),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(),\n)\n\n#plot the mass error for the compounds for each measurement\nf2 &lt;-ggplot(drugmix, aes(x=Compound, y=Mass_acc))+\n  geom_point()+\n  geom_point(aes(y=Mass_acc2), color=\"red\")+\n  geom_point(aes(y=Mass_acc3), color=\"green\")+\n  geom_point(aes(y=Mass_acc4), color=\"blue\")+\n  geom_point(aes(y=Mass_acc5), color=\"orange\")+\n  \n  labs( y = \"Mass Accuracy [ppm]\", x=\" \") +\n  \n    theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid.major = element_blank(),  # Remove grid lines\n    panel.grid.minor = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9, angle = 45, hjust = 1),  # Make x-axis text bold\n    axis.ticks.x = element_line(color = \"black\", ),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    plot.margin = margin(0.5, 0.5, 0.4, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=9),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(),\n)\n\n#plot the CCS for the compounds for each measurement\nf3 &lt;- ggplot(drugmix, aes(x=Theor_adduct_mz, y=`CCS...12`))+\n  geom_point()+\n  geom_point(aes(x=Theor_adduct_mz, y=`CCS...19`), color=\"red\")+\n  geom_point(aes(x=Theor_adduct_mz, y=`CCS...26`), color=\"green\")+\n  geom_point(aes(x=Theor_adduct_mz, y=`CCS...33`), color=\"blue\")+\n  geom_point(aes(x=Theor_adduct_mz, y=`CCS...40`), color=\"orange\")+\n  \n  labs( y = \"Drift Time\", x=expression(paste(\"Theoretical \",italic(\"m/z\"), \" values\"))) +\n  \n    theme_minimal()+\n  theme(\n    panel.background = element_rect(fill = \"white\"),  # Set white background\n    panel.grid.major = element_blank(),  # Remove grid lines\n    panel.grid.minor = element_blank(),  # Remove grid lines\n    axis.text = element_text(size = 9),  # Increase font size of axis text\n    axis.title.y = element_text(size = 9,face = \"bold\"),  # Make y-axis label bold and italic\n    axis.text.y = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.title.x = element_text(size = 10,face = \"bold\"),\n    axis.text.x = element_text(color = \"black\", size = 9),  # Make x-axis text bold\n    axis.ticks.x = element_line(color = \"black\"),  # Add ticks to x-axis in black color\n    axis.ticks.y = element_line(color = \"black\"),  # Add ticks to y-axis in black color\n    plot.margin = margin(0.5, 0.5, 0.4, 0.5, \"cm\"),  # Set plot margins\n    legend.text=element_text(size=9),\n    legend.background = element_rect(fill=\"white\",\n                                   size=0.5, linetype=\"solid\", \n                                   colour =\"black\"),\n    legend.title = element_blank(),\n)\n    \nggarrange(f2, f1, f3,\n          labels = c(\"A\", \"B\", \"C\"),\n          ncol=3)\n\n\n\nf3\n\n\n\n\n\nTidyMass\n\n#source(\"https://www.tidymass.org/tidymass-packages/install_tidymass.txt\")\n#install_tidymass(from = \"tidymass.org\")"
  }
]